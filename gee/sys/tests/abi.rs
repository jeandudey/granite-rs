// This file was generated by gir (https://github.com/gtk-rs/gir @ 00040a2)
// from gir-files (https://github.com/gtk-rs/gir-files @ 7c3d3f5+)
// DO NOT EDIT

use std::env;
use std::error::Error;
use std::path::Path;
use std::mem::{align_of, size_of};
use std::process::Command;
use std::str;
use tempfile::Builder;
use gee_sys::*;

static PACKAGES: &[&str] = &["gee-0.8"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Compiler, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Compiler { args })
    }

    pub fn define<'a, V: Into<Option<&'a str>>>(&mut self, var: &str, val: V) {
        let arg = match val.into() {
            None => format!("-D{}", var),
            Some(val) => format!("-D{}={}", var, val),
        };
        self.args.push(arg);
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {:?} failed, {}",
                               &cmd, status).into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{} {}", name, err).into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let mut cmd = Command::new("pkg-config");
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {:?} returned {}",
                           &cmd, out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
    /// Number of tests that failed to compile.
    failed_to_compile: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn record_failed_to_compile(&mut self) {
        self.failed += 1;
        self.failed_to_compile += 1;
    }
    fn summary(&self) -> String {
        format!(
            "{} passed; {} failed (compilation errors: {})",
            self.passed,
            self.failed,
            self.failed_to_compile)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let tmpdir = Builder::new().prefix("abi").tempdir().expect("temporary directory");
    let cc = Compiler::new().expect("configured compiler");

    assert_eq!("1",
               get_c_value(tmpdir.path(), &cc, "1").expect("C constant"),
               "failed to obtain correct constant value for 1");

    let mut results : Results = Default::default();
    for (i, &(name, rust_value)) in RUST_CONSTANTS.iter().enumerate() {
        match get_c_value(tmpdir.path(), &cc, name) {
            Err(e) => {
                results.record_failed_to_compile();
                eprintln!("{}", e);
            },
            Ok(ref c_value) => {
                if rust_value == c_value {
                    results.record_passed();
                } else {
                    results.record_failed();
                    eprintln!("Constant value mismatch for {}\nRust: {:?}\nC:    {:?}",
                              name, rust_value, c_value);
                }
            }
        };
        if (i + 1) % 25 == 0 {
            println!("constants ... {}", results.summary());
        }
    }
    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let tmpdir = Builder::new().prefix("abi").tempdir().expect("temporary directory");
    let cc = Compiler::new().expect("configured compiler");

    assert_eq!(Layout {size: 1, alignment: 1},
               get_c_layout(tmpdir.path(), &cc, "char").expect("C layout"),
               "failed to obtain correct layout for char type");

    let mut results : Results = Default::default();
    for (i, &(name, rust_layout)) in RUST_LAYOUTS.iter().enumerate() {
        match get_c_layout(tmpdir.path(), &cc, name) {
            Err(e) => {
                results.record_failed_to_compile();
                eprintln!("{}", e);
            },
            Ok(c_layout) => {
                if rust_layout == c_layout {
                    results.record_passed();
                } else {
                    results.record_failed();
                    eprintln!("Layout mismatch for {}\nRust: {:?}\nC:    {:?}",
                              name, rust_layout, &c_layout);
                }
            }
        };
        if (i + 1) % 25 == 0 {
            println!("layout    ... {}", results.summary());
        }
    }
    results.expect_total_success();
}

fn get_c_layout(dir: &Path, cc: &Compiler, name: &str) -> Result<Layout, Box<dyn Error>> {
    let exe = dir.join("layout");
    let mut cc = cc.clone();
    cc.define("ABI_TYPE_NAME", name);
    cc.compile(Path::new("tests/layout.c"), &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}",
                           &abi_cmd, &output).into());
    }

    let stdout = str::from_utf8(&output.stdout)?;
    let mut words = stdout.trim().split_whitespace();
    let size = words.next().unwrap().parse().unwrap();
    let alignment = words.next().unwrap().parse().unwrap();
    Ok(Layout {size, alignment})
}

fn get_c_value(dir: &Path, cc: &Compiler, name: &str) -> Result<String, Box<dyn Error>> {
    let exe = dir.join("constant");
    let mut cc = cc.clone();
    cc.define("ABI_CONSTANT_NAME", name);
    cc.compile(Path::new("tests/constant.c"), &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}",
                           &abi_cmd, &output).into());
    }

    let output = str::from_utf8(&output.stdout)?.trim();
    if !output.starts_with("###gir test###") ||
       !output.ends_with("###gir test###") {
        return Err(format!("command {:?} return invalid output, {:?}",
                           &abi_cmd, &output).into());
    }

    Ok(String::from(&output[14..(output.len() - 14)]))
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("GeeAbstractBidirList", Layout {size: size_of::<GeeAbstractBidirList>(), alignment: align_of::<GeeAbstractBidirList>()}),
    ("GeeAbstractBidirListClass", Layout {size: size_of::<GeeAbstractBidirListClass>(), alignment: align_of::<GeeAbstractBidirListClass>()}),
    ("GeeAbstractBidirSortedMap", Layout {size: size_of::<GeeAbstractBidirSortedMap>(), alignment: align_of::<GeeAbstractBidirSortedMap>()}),
    ("GeeAbstractBidirSortedMapClass", Layout {size: size_of::<GeeAbstractBidirSortedMapClass>(), alignment: align_of::<GeeAbstractBidirSortedMapClass>()}),
    ("GeeAbstractBidirSortedSet", Layout {size: size_of::<GeeAbstractBidirSortedSet>(), alignment: align_of::<GeeAbstractBidirSortedSet>()}),
    ("GeeAbstractBidirSortedSetClass", Layout {size: size_of::<GeeAbstractBidirSortedSetClass>(), alignment: align_of::<GeeAbstractBidirSortedSetClass>()}),
    ("GeeAbstractCollection", Layout {size: size_of::<GeeAbstractCollection>(), alignment: align_of::<GeeAbstractCollection>()}),
    ("GeeAbstractCollectionClass", Layout {size: size_of::<GeeAbstractCollectionClass>(), alignment: align_of::<GeeAbstractCollectionClass>()}),
    ("GeeAbstractList", Layout {size: size_of::<GeeAbstractList>(), alignment: align_of::<GeeAbstractList>()}),
    ("GeeAbstractListClass", Layout {size: size_of::<GeeAbstractListClass>(), alignment: align_of::<GeeAbstractListClass>()}),
    ("GeeAbstractMap", Layout {size: size_of::<GeeAbstractMap>(), alignment: align_of::<GeeAbstractMap>()}),
    ("GeeAbstractMapClass", Layout {size: size_of::<GeeAbstractMapClass>(), alignment: align_of::<GeeAbstractMapClass>()}),
    ("GeeAbstractMultiMap", Layout {size: size_of::<GeeAbstractMultiMap>(), alignment: align_of::<GeeAbstractMultiMap>()}),
    ("GeeAbstractMultiMapClass", Layout {size: size_of::<GeeAbstractMultiMapClass>(), alignment: align_of::<GeeAbstractMultiMapClass>()}),
    ("GeeAbstractMultiSet", Layout {size: size_of::<GeeAbstractMultiSet>(), alignment: align_of::<GeeAbstractMultiSet>()}),
    ("GeeAbstractMultiSetClass", Layout {size: size_of::<GeeAbstractMultiSetClass>(), alignment: align_of::<GeeAbstractMultiSetClass>()}),
    ("GeeAbstractQueue", Layout {size: size_of::<GeeAbstractQueue>(), alignment: align_of::<GeeAbstractQueue>()}),
    ("GeeAbstractQueueClass", Layout {size: size_of::<GeeAbstractQueueClass>(), alignment: align_of::<GeeAbstractQueueClass>()}),
    ("GeeAbstractSet", Layout {size: size_of::<GeeAbstractSet>(), alignment: align_of::<GeeAbstractSet>()}),
    ("GeeAbstractSetClass", Layout {size: size_of::<GeeAbstractSetClass>(), alignment: align_of::<GeeAbstractSetClass>()}),
    ("GeeAbstractSortedMap", Layout {size: size_of::<GeeAbstractSortedMap>(), alignment: align_of::<GeeAbstractSortedMap>()}),
    ("GeeAbstractSortedMapClass", Layout {size: size_of::<GeeAbstractSortedMapClass>(), alignment: align_of::<GeeAbstractSortedMapClass>()}),
    ("GeeAbstractSortedSet", Layout {size: size_of::<GeeAbstractSortedSet>(), alignment: align_of::<GeeAbstractSortedSet>()}),
    ("GeeAbstractSortedSetClass", Layout {size: size_of::<GeeAbstractSortedSetClass>(), alignment: align_of::<GeeAbstractSortedSetClass>()}),
    ("GeeArrayList", Layout {size: size_of::<GeeArrayList>(), alignment: align_of::<GeeArrayList>()}),
    ("GeeArrayListClass", Layout {size: size_of::<GeeArrayListClass>(), alignment: align_of::<GeeArrayListClass>()}),
    ("GeeArrayQueue", Layout {size: size_of::<GeeArrayQueue>(), alignment: align_of::<GeeArrayQueue>()}),
    ("GeeArrayQueueClass", Layout {size: size_of::<GeeArrayQueueClass>(), alignment: align_of::<GeeArrayQueueClass>()}),
    ("GeeBidirIteratorIface", Layout {size: size_of::<GeeBidirIteratorIface>(), alignment: align_of::<GeeBidirIteratorIface>()}),
    ("GeeBidirListIface", Layout {size: size_of::<GeeBidirListIface>(), alignment: align_of::<GeeBidirListIface>()}),
    ("GeeBidirListIteratorIface", Layout {size: size_of::<GeeBidirListIteratorIface>(), alignment: align_of::<GeeBidirListIteratorIface>()}),
    ("GeeBidirMapIteratorIface", Layout {size: size_of::<GeeBidirMapIteratorIface>(), alignment: align_of::<GeeBidirMapIteratorIface>()}),
    ("GeeBidirSortedMapIface", Layout {size: size_of::<GeeBidirSortedMapIface>(), alignment: align_of::<GeeBidirSortedMapIface>()}),
    ("GeeBidirSortedSetIface", Layout {size: size_of::<GeeBidirSortedSetIface>(), alignment: align_of::<GeeBidirSortedSetIface>()}),
    ("GeeCollectionIface", Layout {size: size_of::<GeeCollectionIface>(), alignment: align_of::<GeeCollectionIface>()}),
    ("GeeComparableIface", Layout {size: size_of::<GeeComparableIface>(), alignment: align_of::<GeeComparableIface>()}),
    ("GeeConcurrentList", Layout {size: size_of::<GeeConcurrentList>(), alignment: align_of::<GeeConcurrentList>()}),
    ("GeeConcurrentListClass", Layout {size: size_of::<GeeConcurrentListClass>(), alignment: align_of::<GeeConcurrentListClass>()}),
    ("GeeConcurrentSet", Layout {size: size_of::<GeeConcurrentSet>(), alignment: align_of::<GeeConcurrentSet>()}),
    ("GeeConcurrentSetClass", Layout {size: size_of::<GeeConcurrentSetClass>(), alignment: align_of::<GeeConcurrentSetClass>()}),
    ("GeeConcurrentSetRangeType", Layout {size: size_of::<GeeConcurrentSetRangeType>(), alignment: align_of::<GeeConcurrentSetRangeType>()}),
    ("GeeDequeIface", Layout {size: size_of::<GeeDequeIface>(), alignment: align_of::<GeeDequeIface>()}),
    ("GeeFutureError", Layout {size: size_of::<GeeFutureError>(), alignment: align_of::<GeeFutureError>()}),
    ("GeeFutureIface", Layout {size: size_of::<GeeFutureIface>(), alignment: align_of::<GeeFutureIface>()}),
    ("GeeHashMap", Layout {size: size_of::<GeeHashMap>(), alignment: align_of::<GeeHashMap>()}),
    ("GeeHashMapClass", Layout {size: size_of::<GeeHashMapClass>(), alignment: align_of::<GeeHashMapClass>()}),
    ("GeeHashMultiMap", Layout {size: size_of::<GeeHashMultiMap>(), alignment: align_of::<GeeHashMultiMap>()}),
    ("GeeHashMultiMapClass", Layout {size: size_of::<GeeHashMultiMapClass>(), alignment: align_of::<GeeHashMultiMapClass>()}),
    ("GeeHashMultiSet", Layout {size: size_of::<GeeHashMultiSet>(), alignment: align_of::<GeeHashMultiSet>()}),
    ("GeeHashMultiSetClass", Layout {size: size_of::<GeeHashMultiSetClass>(), alignment: align_of::<GeeHashMultiSetClass>()}),
    ("GeeHashSet", Layout {size: size_of::<GeeHashSet>(), alignment: align_of::<GeeHashSet>()}),
    ("GeeHashSetClass", Layout {size: size_of::<GeeHashSetClass>(), alignment: align_of::<GeeHashSetClass>()}),
    ("GeeHashableIface", Layout {size: size_of::<GeeHashableIface>(), alignment: align_of::<GeeHashableIface>()}),
    ("GeeHazardPointerPolicy", Layout {size: size_of::<GeeHazardPointerPolicy>(), alignment: align_of::<GeeHazardPointerPolicy>()}),
    ("GeeHazardPointerReleasePolicy", Layout {size: size_of::<GeeHazardPointerReleasePolicy>(), alignment: align_of::<GeeHazardPointerReleasePolicy>()}),
    ("GeeIterableIface", Layout {size: size_of::<GeeIterableIface>(), alignment: align_of::<GeeIterableIface>()}),
    ("GeeIteratorIface", Layout {size: size_of::<GeeIteratorIface>(), alignment: align_of::<GeeIteratorIface>()}),
    ("GeeLazy", Layout {size: size_of::<GeeLazy>(), alignment: align_of::<GeeLazy>()}),
    ("GeeLazyClass", Layout {size: size_of::<GeeLazyClass>(), alignment: align_of::<GeeLazyClass>()}),
    ("GeeLinkedList", Layout {size: size_of::<GeeLinkedList>(), alignment: align_of::<GeeLinkedList>()}),
    ("GeeLinkedListClass", Layout {size: size_of::<GeeLinkedListClass>(), alignment: align_of::<GeeLinkedListClass>()}),
    ("GeeListIface", Layout {size: size_of::<GeeListIface>(), alignment: align_of::<GeeListIface>()}),
    ("GeeListIteratorIface", Layout {size: size_of::<GeeListIteratorIface>(), alignment: align_of::<GeeListIteratorIface>()}),
    ("GeeMapEntry", Layout {size: size_of::<GeeMapEntry>(), alignment: align_of::<GeeMapEntry>()}),
    ("GeeMapEntryClass", Layout {size: size_of::<GeeMapEntryClass>(), alignment: align_of::<GeeMapEntryClass>()}),
    ("GeeMapIface", Layout {size: size_of::<GeeMapIface>(), alignment: align_of::<GeeMapIface>()}),
    ("GeeMapIteratorIface", Layout {size: size_of::<GeeMapIteratorIface>(), alignment: align_of::<GeeMapIteratorIface>()}),
    ("GeeMultiMapIface", Layout {size: size_of::<GeeMultiMapIface>(), alignment: align_of::<GeeMultiMapIface>()}),
    ("GeeMultiSetIface", Layout {size: size_of::<GeeMultiSetIface>(), alignment: align_of::<GeeMultiSetIface>()}),
    ("GeePriorityQueue", Layout {size: size_of::<GeePriorityQueue>(), alignment: align_of::<GeePriorityQueue>()}),
    ("GeePriorityQueueClass", Layout {size: size_of::<GeePriorityQueueClass>(), alignment: align_of::<GeePriorityQueueClass>()}),
    ("GeePromise", Layout {size: size_of::<GeePromise>(), alignment: align_of::<GeePromise>()}),
    ("GeePromiseClass", Layout {size: size_of::<GeePromiseClass>(), alignment: align_of::<GeePromiseClass>()}),
    ("GeeQueueIface", Layout {size: size_of::<GeeQueueIface>(), alignment: align_of::<GeeQueueIface>()}),
    ("GeeSetIface", Layout {size: size_of::<GeeSetIface>(), alignment: align_of::<GeeSetIface>()}),
    ("GeeSortedMapIface", Layout {size: size_of::<GeeSortedMapIface>(), alignment: align_of::<GeeSortedMapIface>()}),
    ("GeeSortedSetIface", Layout {size: size_of::<GeeSortedSetIface>(), alignment: align_of::<GeeSortedSetIface>()}),
    ("GeeTraversableIface", Layout {size: size_of::<GeeTraversableIface>(), alignment: align_of::<GeeTraversableIface>()}),
    ("GeeTraversableStream", Layout {size: size_of::<GeeTraversableStream>(), alignment: align_of::<GeeTraversableStream>()}),
    ("GeeTreeMap", Layout {size: size_of::<GeeTreeMap>(), alignment: align_of::<GeeTreeMap>()}),
    ("GeeTreeMapClass", Layout {size: size_of::<GeeTreeMapClass>(), alignment: align_of::<GeeTreeMapClass>()}),
    ("GeeTreeMultiMap", Layout {size: size_of::<GeeTreeMultiMap>(), alignment: align_of::<GeeTreeMultiMap>()}),
    ("GeeTreeMultiMapClass", Layout {size: size_of::<GeeTreeMultiMapClass>(), alignment: align_of::<GeeTreeMultiMapClass>()}),
    ("GeeTreeMultiSet", Layout {size: size_of::<GeeTreeMultiSet>(), alignment: align_of::<GeeTreeMultiSet>()}),
    ("GeeTreeMultiSetClass", Layout {size: size_of::<GeeTreeMultiSetClass>(), alignment: align_of::<GeeTreeMultiSetClass>()}),
    ("GeeTreeSet", Layout {size: size_of::<GeeTreeSet>(), alignment: align_of::<GeeTreeSet>()}),
    ("GeeTreeSetClass", Layout {size: size_of::<GeeTreeSetClass>(), alignment: align_of::<GeeTreeSetClass>()}),
    ("GeeUnrolledLinkedList", Layout {size: size_of::<GeeUnrolledLinkedList>(), alignment: align_of::<GeeUnrolledLinkedList>()}),
    ("GeeUnrolledLinkedListClass", Layout {size: size_of::<GeeUnrolledLinkedListClass>(), alignment: align_of::<GeeUnrolledLinkedListClass>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) GEE_CONCURRENT_SET_RANGE_TYPE_BOUNDED", "2"),
    ("(gint) GEE_CONCURRENT_SET_RANGE_TYPE_EMPTY", "3"),
    ("(gint) GEE_CONCURRENT_SET_RANGE_TYPE_HEAD", "0"),
    ("(gint) GEE_CONCURRENT_SET_RANGE_TYPE_TAIL", "1"),
    ("(gint) GEE_FUTURE_ERROR_ABANDON_PROMISE", "0"),
    ("(gint) GEE_FUTURE_ERROR_EXCEPTION", "1"),
    ("(gint) GEE_HAZARD_POINTER_POLICY_DEFAULT", "0"),
    ("(gint) GEE_HAZARD_POINTER_POLICY_FREE", "3"),
    ("(gint) GEE_HAZARD_POINTER_POLICY_RELEASE", "5"),
    ("(gint) GEE_HAZARD_POINTER_POLICY_THREAD_EXIT", "1"),
    ("(gint) GEE_HAZARD_POINTER_POLICY_TRY_FREE", "2"),
    ("(gint) GEE_HAZARD_POINTER_POLICY_TRY_RELEASE", "4"),
    ("(gint) GEE_HAZARD_POINTER_RELEASE_POLICY_HELPER_THREAD", "0"),
    ("(gint) GEE_HAZARD_POINTER_RELEASE_POLICY_MAIN_LOOP", "1"),
    ("(gint) GEE_TRAVERSABLE_STREAM_CONTINUE", "1"),
    ("(gint) GEE_TRAVERSABLE_STREAM_END", "2"),
    ("(gint) GEE_TRAVERSABLE_STREAM_WAIT", "3"),
    ("(gint) GEE_TRAVERSABLE_STREAM_YIELD", "0"),
];



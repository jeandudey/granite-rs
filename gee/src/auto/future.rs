// This file was generated by gir (https://github.com/gtk-rs/gir @ 00040a2)
// from gir-files (https://github.com/gtk-rs/gir-files @ 7c3d3f5+)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct Future(Interface<ffi::GeeFuture>);

    match fn {
        get_type => || ffi::gee_future_get_type(),
    }
}

pub const NONE_FUTURE: Option<&Future> = None;

pub trait FutureExt: 'static {
    //#[doc(alias = "gee_future_wait")]
    //fn wait(error: /*Ignored*/Option<glib::Error>) -> /*Unimplemented*/Option<Fundamental: Pointer>;

    //#[doc(alias = "gee_future_wait_until")]
    //fn wait_until(end_time: i64, value: /*Unimplemented*/&mut Fundamental: Pointer, error: /*Ignored*/Option<glib::Error>) -> bool;

    //#[doc(alias = "gee_future_wait_async")]
    //fn wait_async<P: FnOnce(Result<(), glib::Error>) + 'static>(_callback_: P, _callback__target: /*Unimplemented*/Fundamental: Pointer);

    //#[doc(alias = "gee_future_map")]
    //fn map(a_type: glib::types::Type, a_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func: /*Unimplemented*/Fn(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func_target: /*Unimplemented*/Fundamental: Pointer) -> Option<Future>;

    //#[doc(alias = "gee_future_light_map_fixed")]
    //fn light_map(a_type: glib::types::Type, a_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func: /*Unimplemented*/Fn(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func_target: /*Unimplemented*/Fundamental: Pointer) -> Option<Future>;

    //#[doc(alias = "gee_future_light_map")]
    //fn light_map_broken(a_type: glib::types::Type, a_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func: /*Unimplemented*/FnMut(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func_target: /*Unimplemented*/Fundamental: Pointer) -> Option<Future>;

    //#[doc(alias = "gee_future_zip")]
    //fn zip<P: IsA<Future>>(a_type: glib::types::Type, a_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, b_type: glib::types::Type, b_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, zip_func: /*Unimplemented*/FnOnce(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer, /*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, zip_func_target: /*Unimplemented*/Fundamental: Pointer, second: &P) -> Option<Future>;

    //#[doc(alias = "gee_future_flat_map")]
    //fn flat_map(a_type: glib::types::Type, a_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func: /*Unimplemented*/Fn(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer) -> Future, func_target: /*Unimplemented*/Fundamental: Pointer) -> Option<Future>;

    //#[doc(alias = "gee_future_get_value")]
    //fn get_value() -> /*Unimplemented*/Option<Fundamental: Pointer>;

    #[doc(alias = "gee_future_get_ready")]
    fn get_ready() -> bool;

    //#[doc(alias = "gee_future_get_exception")]
    //fn get_exception() -> /*Ignored*/Option<glib::Error>;

    fn connect_property_ready_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_exception_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Future>> FutureExt for O {
    //fn wait(error: /*Ignored*/Option<glib::Error>) -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call ffi:gee_future_wait() }
    //}

    //fn wait_until(end_time: i64, value: /*Unimplemented*/&mut Fundamental: Pointer, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:gee_future_wait_until() }
    //}

    //fn wait_async<P: FnOnce(Result<(), glib::Error>) + 'static>(_callback_: P, _callback__target: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi:gee_future_wait_async() }
    //}

    //fn map(a_type: glib::types::Type, a_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func: /*Unimplemented*/Fn(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func_target: /*Unimplemented*/Fundamental: Pointer) -> Option<Future> {
    //    unsafe { TODO: call ffi:gee_future_map() }
    //}

    //fn light_map(a_type: glib::types::Type, a_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func: /*Unimplemented*/Fn(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func_target: /*Unimplemented*/Fundamental: Pointer) -> Option<Future> {
    //    unsafe { TODO: call ffi:gee_future_light_map_fixed() }
    //}

    //fn light_map_broken(a_type: glib::types::Type, a_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func: /*Unimplemented*/FnMut(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func_target: /*Unimplemented*/Fundamental: Pointer) -> Option<Future> {
    //    unsafe { TODO: call ffi:gee_future_light_map() }
    //}

    //fn zip<P: IsA<Future>>(a_type: glib::types::Type, a_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, b_type: glib::types::Type, b_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, zip_func: /*Unimplemented*/FnOnce(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer, /*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, zip_func_target: /*Unimplemented*/Fundamental: Pointer, second: &P) -> Option<Future> {
    //    unsafe { TODO: call ffi:gee_future_zip() }
    //}

    //fn flat_map(a_type: glib::types::Type, a_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func: /*Unimplemented*/Fn(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer) -> Future, func_target: /*Unimplemented*/Fundamental: Pointer) -> Option<Future> {
    //    unsafe { TODO: call ffi:gee_future_flat_map() }
    //}

    //fn get_value() -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call ffi:gee_future_get_value() }
    //}

    fn get_ready() -> bool {
        unsafe {
            from_glib(ffi::gee_future_get_ready())
        }
    }

    //fn get_exception() -> /*Ignored*/Option<glib::Error> {
    //    unsafe { TODO: call ffi:gee_future_get_exception() }
    //}

    fn connect_property_ready_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ready_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GeeFuture, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Future>
        {
            let f: &F = &*(f as *const F);
            f(&Future::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::ready\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_ready_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_exception_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_exception_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GeeFuture, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Future>
        {
            let f: &F = &*(f as *const F);
            f(&Future::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::exception\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_exception_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Future {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Future")
    }
}

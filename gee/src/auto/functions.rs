// This file was generated by gir (https://github.com/gtk-rs/gir @ 00040a2)
// from gir-files (https://github.com/gtk-rs/gir-files @ 7c3d3f5+)
// DO NOT EDIT

use glib::translate::*;


//#[doc(alias = "gee_functions_get_equal_func_for")]
//pub fn functions_get_equal_func_for(t: glib::types::Type, result_target: /*Unimplemented*/&mut Fundamental: Pointer) -> (/*Unimplemented*/Fn(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer, /*Unimplemented*/Fundamental: Pointer) -> bool, Fn() + 'static) {
//    unsafe { TODO: call ffi:gee_functions_get_equal_func_for() }
//}

//#[doc(alias = "gee_functions_get_hash_func_for")]
//pub fn functions_get_hash_func_for(t: glib::types::Type, result_target: /*Unimplemented*/&mut Fundamental: Pointer) -> (/*Unimplemented*/Fn(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static, /*Unimplemented*/Fundamental: Pointer) -> u32, Fn() + 'static) {
//    unsafe { TODO: call ffi:gee_functions_get_hash_func_for() }
//}

//#[doc(alias = "gee_functions_get_compare_func_for")]
//pub fn functions_get_compare_func_for(t: glib::types::Type, result_target: /*Unimplemented*/&mut Fundamental: Pointer) -> (/*Unimplemented*/Fn(/*Unimplemented*/Option<Fundamental: Pointer>, /*Unimplemented*/Option<Fundamental: Pointer>) -> i32, Fn() + 'static) {
//    unsafe { TODO: call ffi:gee_functions_get_compare_func_for() }
//}

#[doc(alias = "gee_hazard_pointer_policy_is_concrete")]
pub fn hazard_pointer_policy_is_concrete() -> bool {
    unsafe {
        from_glib(ffi::gee_hazard_pointer_policy_is_concrete())
    }
}

#[doc(alias = "gee_hazard_pointer_policy_is_blocking")]
pub fn hazard_pointer_policy_is_blocking() -> bool {
    unsafe {
        from_glib(ffi::gee_hazard_pointer_policy_is_blocking())
    }
}

#[doc(alias = "gee_hazard_pointer_policy_is_safe")]
pub fn hazard_pointer_policy_is_safe() -> bool {
    unsafe {
        from_glib(ffi::gee_hazard_pointer_policy_is_safe())
    }
}

//#[doc(alias = "gee_hazard_pointer_policy_to_concrete")]
//pub fn hazard_pointer_policy_to_concrete() -> /*Ignored*/HazardPointerPolicy {
//    unsafe { TODO: call ffi:gee_hazard_pointer_policy_to_concrete() }
//}

//#[doc(alias = "gee_task")]
//pub fn task(g_type: glib::types::Type, g_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, task: /*Unimplemented*/FnOnce(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static) -> /*Unimplemented*/Fundamental: Pointer, task_target: /*Unimplemented*/Fundamental: Pointer, error: /*Ignored*/Option<glib::Error>) -> Option<Future> {
//    unsafe { TODO: call ffi:gee_task() }
//}

//#[doc(alias = "gee_async_task")]
//pub fn async_task<P: FnOnce(Result<(), glib::Error>) + 'static>(_callback_: P, _callback__target: /*Unimplemented*/Fundamental: Pointer) {
//    unsafe { TODO: call ffi:gee_async_task() }
//}

// This file was generated by gir (https://github.com/gtk-rs/gir @ 00040a2)
// from gir-files (https://github.com/gtk-rs/gir-files @ 7c3d3f5+)
// DO NOT EDIT

use crate::Collection;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct Queue(Interface<ffi::GeeQueue>) @requires Collection;

    match fn {
        get_type => || ffi::gee_queue_get_type(),
    }
}

pub const NONE_QUEUE: Option<&Queue> = None;

pub trait QueueExt: 'static {
    //#[doc(alias = "gee_queue_offer")]
    //fn offer(element: /*Unimplemented*/Fundamental: Pointer) -> bool;

    //#[doc(alias = "gee_queue_peek")]
    //fn peek() -> /*Unimplemented*/Option<Fundamental: Pointer>;

    //#[doc(alias = "gee_queue_poll")]
    //fn poll() -> /*Unimplemented*/Option<Fundamental: Pointer>;

    #[doc(alias = "gee_queue_drain")]
    fn drain<P: IsA<Collection>>(recipient: &P, amount: i32) -> i32;

    #[doc(alias = "gee_queue_get_capacity")]
    fn get_capacity() -> i32;

    #[doc(alias = "gee_queue_get_remaining_capacity")]
    fn get_remaining_capacity() -> i32;

    #[doc(alias = "gee_queue_get_is_full")]
    fn get_is_full() -> bool;

    fn connect_property_capacity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_remaining_capacity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_full_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Queue>> QueueExt for O {
    //fn offer(element: /*Unimplemented*/Fundamental: Pointer) -> bool {
    //    unsafe { TODO: call ffi:gee_queue_offer() }
    //}

    //fn peek() -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call ffi:gee_queue_peek() }
    //}

    //fn poll() -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call ffi:gee_queue_poll() }
    //}

    fn drain<P: IsA<Collection>>(recipient: &P, amount: i32) -> i32 {
        unsafe {
            ffi::gee_queue_drain(recipient.as_ref().to_glib_none().0, amount)
        }
    }

    fn get_capacity() -> i32 {
        unsafe {
            ffi::gee_queue_get_capacity()
        }
    }

    fn get_remaining_capacity() -> i32 {
        unsafe {
            ffi::gee_queue_get_remaining_capacity()
        }
    }

    fn get_is_full() -> bool {
        unsafe {
            from_glib(ffi::gee_queue_get_is_full())
        }
    }

    fn connect_property_capacity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_capacity_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GeeQueue, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Queue>
        {
            let f: &F = &*(f as *const F);
            f(&Queue::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::capacity\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_capacity_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_remaining_capacity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_remaining_capacity_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GeeQueue, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Queue>
        {
            let f: &F = &*(f as *const F);
            f(&Queue::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::remaining-capacity\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_remaining_capacity_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_is_full_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_full_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GeeQueue, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Queue>
        {
            let f: &F = &*(f as *const F);
            f(&Queue::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-full\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_is_full_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Queue {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Queue")
    }
}

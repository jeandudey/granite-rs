// This file was generated by gir (https://github.com/gtk-rs/gir @ 00040a2)
// from gir-files (https://github.com/gtk-rs/gir-files @ 7c3d3f5+)
// DO NOT EDIT

use crate::Future;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    pub struct Lazy(Object<ffi::GeeLazy, ffi::GeeLazyClass>);

    match fn {
        get_type => || ffi::gee_lazy_get_type(),
    }
}

impl Lazy {
    //#[doc(alias = "gee_lazy_new")]
    //pub fn new(g_type: glib::types::Type, g_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, func: /*Unimplemented*/Fn(glib::types::Type, /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, &Fn() + 'static) -> /*Unimplemented*/Fundamental: Pointer, func_target: /*Unimplemented*/Fundamental: Pointer) -> Lazy {
    //    unsafe { TODO: call ffi:gee_lazy_new() }
    //}

    //#[doc(alias = "gee_lazy_new_from_value")]
    //pub fn from_value(g_type: glib::types::Type, g_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer, item: /*Unimplemented*/Fundamental: Pointer) -> Lazy {
    //    unsafe { TODO: call ffi:gee_lazy_new_from_value() }
    //}
}

pub const NONE_LAZY: Option<&Lazy> = None;

pub trait LazyExt: 'static {
    #[doc(alias = "gee_lazy_eval")]
    fn eval();

    //#[doc(alias = "gee_lazy_get")]
    //fn get() -> /*Unimplemented*/Option<Fundamental: Pointer>;

    //#[doc(alias = "gee_lazy_get_value")]
    //fn get_value() -> /*Unimplemented*/Option<Fundamental: Pointer>;

    #[doc(alias = "gee_lazy_get_future")]
    fn get_future() -> Option<Future>;
}

impl<O: IsA<Lazy>> LazyExt for O {
    fn eval() {
        unsafe {
            ffi::gee_lazy_eval();
        }
    }

    //fn get() -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call ffi:gee_lazy_get() }
    //}

    //fn get_value() -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call ffi:gee_lazy_get_value() }
    //}

    fn get_future() -> Option<Future> {
        unsafe {
            from_glib_full(ffi::gee_lazy_get_future())
        }
    }
}

impl fmt::Display for Lazy {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Lazy")
    }
}

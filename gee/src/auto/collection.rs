// This file was generated by gir (https://github.com/gtk-rs/gir @ 00040a2)
// from gir-files (https://github.com/gtk-rs/gir-files @ 7c3d3f5+)
// DO NOT EDIT

use crate::Iterator;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct Collection(Interface<ffi::GeeCollection>);

    match fn {
        get_type => || ffi::gee_collection_get_type(),
    }
}

impl Collection {
    //#[doc(alias = "gee_collection_empty")]
    //pub fn empty(g_type: glib::types::Type, g_dup_func: /*Unimplemented*/Fn(/*Unimplemented*/Fundamental: Pointer) -> /*Unimplemented*/Fundamental: Pointer) -> Option<Collection> {
    //    unsafe { TODO: call ffi:gee_collection_empty() }
    //}
}

pub const NONE_COLLECTION: Option<&Collection> = None;

pub trait CollectionExt: 'static {
    //#[doc(alias = "gee_collection_contains")]
    //fn contains(item: /*Unimplemented*/Fundamental: Pointer) -> bool;

    //#[doc(alias = "gee_collection_add")]
    //fn add(item: /*Unimplemented*/Fundamental: Pointer) -> bool;

    //#[doc(alias = "gee_collection_remove")]
    //fn remove(item: /*Unimplemented*/Fundamental: Pointer) -> bool;

    #[doc(alias = "gee_collection_clear")]
    fn clear();

    #[doc(alias = "gee_collection_add_all")]
    fn add_all<P: IsA<Collection>>(collection: &P) -> bool;

    #[doc(alias = "gee_collection_contains_all")]
    fn contains_all<P: IsA<Collection>>(collection: &P) -> bool;

    #[doc(alias = "gee_collection_remove_all")]
    fn remove_all<P: IsA<Collection>>(collection: &P) -> bool;

    #[doc(alias = "gee_collection_retain_all")]
    fn retain_all<P: IsA<Collection>>(collection: &P) -> bool;

    //#[doc(alias = "gee_collection_to_array")]
    //fn to_array() -> /*Unimplemented*/Vec<Fundamental: Pointer>, i32;

    //#[doc(alias = "gee_collection_add_all_array")]
    //fn add_all_array(array: /*Unimplemented*/&[&Fundamental: Pointer]) -> bool;

    //#[doc(alias = "gee_collection_contains_all_array")]
    //fn contains_all_array(array: /*Unimplemented*/&[&Fundamental: Pointer]) -> bool;

    //#[doc(alias = "gee_collection_remove_all_array")]
    //fn remove_all_array(array: /*Unimplemented*/&[&Fundamental: Pointer]) -> bool;

    #[doc(alias = "gee_collection_add_all_iterator")]
    fn add_all_iterator<P: IsA<Iterator>>(iter: &P) -> bool;

    #[doc(alias = "gee_collection_contains_all_iterator")]
    fn contains_all_iterator<P: IsA<Iterator>>(iter: &P) -> bool;

    #[doc(alias = "gee_collection_remove_all_iterator")]
    fn remove_all_iterator<P: IsA<Iterator>>(iter: &P) -> bool;

    #[doc(alias = "gee_collection_get_size")]
    fn get_size() -> i32;

    #[doc(alias = "gee_collection_get_is_empty")]
    fn get_is_empty() -> bool;

    #[doc(alias = "gee_collection_get_read_only")]
    fn get_read_only() -> bool;

    #[doc(alias = "gee_collection_get_read_only_view")]
    fn get_read_only_view() -> Option<Collection>;

    fn connect_property_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_read_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_read_only_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Collection>> CollectionExt for O {
    //fn contains(item: /*Unimplemented*/Fundamental: Pointer) -> bool {
    //    unsafe { TODO: call ffi:gee_collection_contains() }
    //}

    //fn add(item: /*Unimplemented*/Fundamental: Pointer) -> bool {
    //    unsafe { TODO: call ffi:gee_collection_add() }
    //}

    //fn remove(item: /*Unimplemented*/Fundamental: Pointer) -> bool {
    //    unsafe { TODO: call ffi:gee_collection_remove() }
    //}

    fn clear() {
        unsafe {
            ffi::gee_collection_clear();
        }
    }

    fn add_all<P: IsA<Collection>>(collection: &P) -> bool {
        unsafe {
            from_glib(ffi::gee_collection_add_all(collection.as_ref().to_glib_none().0))
        }
    }

    fn contains_all<P: IsA<Collection>>(collection: &P) -> bool {
        unsafe {
            from_glib(ffi::gee_collection_contains_all(collection.as_ref().to_glib_none().0))
        }
    }

    fn remove_all<P: IsA<Collection>>(collection: &P) -> bool {
        unsafe {
            from_glib(ffi::gee_collection_remove_all(collection.as_ref().to_glib_none().0))
        }
    }

    fn retain_all<P: IsA<Collection>>(collection: &P) -> bool {
        unsafe {
            from_glib(ffi::gee_collection_retain_all(collection.as_ref().to_glib_none().0))
        }
    }

    //fn to_array() -> /*Unimplemented*/Vec<Fundamental: Pointer>, i32 {
    //    unsafe { TODO: call ffi:gee_collection_to_array() }
    //}

    //fn add_all_array(array: /*Unimplemented*/&[&Fundamental: Pointer]) -> bool {
    //    unsafe { TODO: call ffi:gee_collection_add_all_array() }
    //}

    //fn contains_all_array(array: /*Unimplemented*/&[&Fundamental: Pointer]) -> bool {
    //    unsafe { TODO: call ffi:gee_collection_contains_all_array() }
    //}

    //fn remove_all_array(array: /*Unimplemented*/&[&Fundamental: Pointer]) -> bool {
    //    unsafe { TODO: call ffi:gee_collection_remove_all_array() }
    //}

    fn add_all_iterator<P: IsA<Iterator>>(iter: &P) -> bool {
        unsafe {
            from_glib(ffi::gee_collection_add_all_iterator(iter.as_ref().to_glib_none().0))
        }
    }

    fn contains_all_iterator<P: IsA<Iterator>>(iter: &P) -> bool {
        unsafe {
            from_glib(ffi::gee_collection_contains_all_iterator(iter.as_ref().to_glib_none().0))
        }
    }

    fn remove_all_iterator<P: IsA<Iterator>>(iter: &P) -> bool {
        unsafe {
            from_glib(ffi::gee_collection_remove_all_iterator(iter.as_ref().to_glib_none().0))
        }
    }

    fn get_size() -> i32 {
        unsafe {
            ffi::gee_collection_get_size()
        }
    }

    fn get_is_empty() -> bool {
        unsafe {
            from_glib(ffi::gee_collection_get_is_empty())
        }
    }

    fn get_read_only() -> bool {
        unsafe {
            from_glib(ffi::gee_collection_get_read_only())
        }
    }

    fn get_read_only_view() -> Option<Collection> {
        unsafe {
            from_glib_full(ffi::gee_collection_get_read_only_view())
        }
    }

    fn connect_property_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GeeCollection, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Collection>
        {
            let f: &F = &*(f as *const F);
            f(&Collection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::size\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_read_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_read_only_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GeeCollection, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Collection>
        {
            let f: &F = &*(f as *const F);
            f(&Collection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::read-only\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_read_only_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_read_only_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_read_only_view_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GeeCollection, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Collection>
        {
            let f: &F = &*(f as *const F);
            f(&Collection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::read-only-view\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_read_only_view_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Collection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Collection")
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir @ 00040a2)
// from gir-files (https://github.com/gtk-rs/gir-files @ 34af997)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    pub struct Application(Object<ffi::GraniteApplication, ffi::GraniteApplicationClass>);

    match fn {
        get_type => || ffi::granite_application_get_type(),
    }
}

pub const NONE_APPLICATION: Option<&Application> = None;

pub trait ApplicationExt: 'static {
    #[doc(alias = "granite_application_run")]
    fn run(args: &[&str]) -> i32;

    #[doc(alias = "granite_application_set_options")]
    fn set_options();
}

impl<O: IsA<Application>> ApplicationExt for O {
    fn run(args: &[&str]) -> i32 {
        let args_length1 = args.len() as i32;
        unsafe {
            ffi::granite_application_run(args.to_glib_none().0, args_length1)
        }
    }

    fn set_options() {
        unsafe {
            ffi::granite_application_set_options();
        }
    }
}

impl fmt::Display for Application {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Application")
    }
}

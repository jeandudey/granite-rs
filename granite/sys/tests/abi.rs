// This file was generated by gir (https://github.com/gtk-rs/gir @ 00040a2)
// from gir-files (https://github.com/gtk-rs/gir-files @ 7c3d3f5+)
// DO NOT EDIT

use std::env;
use std::error::Error;
use std::path::Path;
use std::mem::{align_of, size_of};
use std::process::Command;
use std::str;
use tempfile::Builder;
use granite_sys::*;

static PACKAGES: &[&str] = &["granite"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Compiler, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Compiler { args })
    }

    pub fn define<'a, V: Into<Option<&'a str>>>(&mut self, var: &str, val: V) {
        let arg = match val.into() {
            None => format!("-D{}", var),
            Some(val) => format!("-D{}={}", var, val),
        };
        self.args.push(arg);
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {:?} failed, {}",
                               &cmd, status).into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{} {}", name, err).into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let mut cmd = Command::new("pkg-config");
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {:?} returned {}",
                           &cmd, out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
    /// Number of tests that failed to compile.
    failed_to_compile: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn record_failed_to_compile(&mut self) {
        self.failed += 1;
        self.failed_to_compile += 1;
    }
    fn summary(&self) -> String {
        format!(
            "{} passed; {} failed (compilation errors: {})",
            self.passed,
            self.failed,
            self.failed_to_compile)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let tmpdir = Builder::new().prefix("abi").tempdir().expect("temporary directory");
    let cc = Compiler::new().expect("configured compiler");

    assert_eq!("1",
               get_c_value(tmpdir.path(), &cc, "1").expect("C constant"),
               "failed to obtain correct constant value for 1");

    let mut results : Results = Default::default();
    for (i, &(name, rust_value)) in RUST_CONSTANTS.iter().enumerate() {
        match get_c_value(tmpdir.path(), &cc, name) {
            Err(e) => {
                results.record_failed_to_compile();
                eprintln!("{}", e);
            },
            Ok(ref c_value) => {
                if rust_value == c_value {
                    results.record_passed();
                } else {
                    results.record_failed();
                    eprintln!("Constant value mismatch for {}\nRust: {:?}\nC:    {:?}",
                              name, rust_value, c_value);
                }
            }
        };
        if (i + 1) % 25 == 0 {
            println!("constants ... {}", results.summary());
        }
    }
    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let tmpdir = Builder::new().prefix("abi").tempdir().expect("temporary directory");
    let cc = Compiler::new().expect("configured compiler");

    assert_eq!(Layout {size: 1, alignment: 1},
               get_c_layout(tmpdir.path(), &cc, "char").expect("C layout"),
               "failed to obtain correct layout for char type");

    let mut results : Results = Default::default();
    for (i, &(name, rust_layout)) in RUST_LAYOUTS.iter().enumerate() {
        match get_c_layout(tmpdir.path(), &cc, name) {
            Err(e) => {
                results.record_failed_to_compile();
                eprintln!("{}", e);
            },
            Ok(c_layout) => {
                if rust_layout == c_layout {
                    results.record_passed();
                } else {
                    results.record_failed();
                    eprintln!("Layout mismatch for {}\nRust: {:?}\nC:    {:?}",
                              name, rust_layout, &c_layout);
                }
            }
        };
        if (i + 1) % 25 == 0 {
            println!("layout    ... {}", results.summary());
        }
    }
    results.expect_total_success();
}

fn get_c_layout(dir: &Path, cc: &Compiler, name: &str) -> Result<Layout, Box<dyn Error>> {
    let exe = dir.join("layout");
    let mut cc = cc.clone();
    cc.define("ABI_TYPE_NAME", name);
    cc.compile(Path::new("tests/layout.c"), &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}",
                           &abi_cmd, &output).into());
    }

    let stdout = str::from_utf8(&output.stdout)?;
    let mut words = stdout.trim().split_whitespace();
    let size = words.next().unwrap().parse().unwrap();
    let alignment = words.next().unwrap().parse().unwrap();
    Ok(Layout {size, alignment})
}

fn get_c_value(dir: &Path, cc: &Compiler, name: &str) -> Result<String, Box<dyn Error>> {
    let exe = dir.join("constant");
    let mut cc = cc.clone();
    cc.define("ABI_CONSTANT_NAME", name);
    cc.compile(Path::new("tests/constant.c"), &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}",
                           &abi_cmd, &output).into());
    }

    let output = str::from_utf8(&output.stdout)?.trim();
    if !output.starts_with("###gir test###") ||
       !output.ends_with("###gir test###") {
        return Err(format!("command {:?} return invalid output, {:?}",
                           &abi_cmd, &output).into());
    }

    Ok(String::from(&output[14..(output.len() - 14)]))
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("GraniteAccelLabel", Layout {size: size_of::<GraniteAccelLabel>(), alignment: align_of::<GraniteAccelLabel>()}),
    ("GraniteAccelLabelClass", Layout {size: size_of::<GraniteAccelLabelClass>(), alignment: align_of::<GraniteAccelLabelClass>()}),
    ("GraniteApplication", Layout {size: size_of::<GraniteApplication>(), alignment: align_of::<GraniteApplication>()}),
    ("GraniteApplicationClass", Layout {size: size_of::<GraniteApplicationClass>(), alignment: align_of::<GraniteApplicationClass>()}),
    ("GraniteAsyncImage", Layout {size: size_of::<GraniteAsyncImage>(), alignment: align_of::<GraniteAsyncImage>()}),
    ("GraniteAsyncImageClass", Layout {size: size_of::<GraniteAsyncImageClass>(), alignment: align_of::<GraniteAsyncImageClass>()}),
    ("GraniteCloseButtonPosition", Layout {size: size_of::<GraniteCloseButtonPosition>(), alignment: align_of::<GraniteCloseButtonPosition>()}),
    ("GraniteCollapseMode", Layout {size: size_of::<GraniteCollapseMode>(), alignment: align_of::<GraniteCollapseMode>()}),
    ("GraniteDrawingBufferSurface", Layout {size: size_of::<GraniteDrawingBufferSurface>(), alignment: align_of::<GraniteDrawingBufferSurface>()}),
    ("GraniteDrawingBufferSurfaceClass", Layout {size: size_of::<GraniteDrawingBufferSurfaceClass>(), alignment: align_of::<GraniteDrawingBufferSurfaceClass>()}),
    ("GraniteDrawingColor", Layout {size: size_of::<GraniteDrawingColor>(), alignment: align_of::<GraniteDrawingColor>()}),
    ("GraniteDrawingColorClass", Layout {size: size_of::<GraniteDrawingColorClass>(), alignment: align_of::<GraniteDrawingColorClass>()}),
    ("GraniteDrawingUtilities", Layout {size: size_of::<GraniteDrawingUtilities>(), alignment: align_of::<GraniteDrawingUtilities>()}),
    ("GraniteDrawingUtilitiesClass", Layout {size: size_of::<GraniteDrawingUtilitiesClass>(), alignment: align_of::<GraniteDrawingUtilitiesClass>()}),
    ("GraniteGtkPatchAboutDialog", Layout {size: size_of::<GraniteGtkPatchAboutDialog>(), alignment: align_of::<GraniteGtkPatchAboutDialog>()}),
    ("GraniteGtkPatchAboutDialogClass", Layout {size: size_of::<GraniteGtkPatchAboutDialogClass>(), alignment: align_of::<GraniteGtkPatchAboutDialogClass>()}),
    ("GraniteHeaderLabel", Layout {size: size_of::<GraniteHeaderLabel>(), alignment: align_of::<GraniteHeaderLabel>()}),
    ("GraniteHeaderLabelClass", Layout {size: size_of::<GraniteHeaderLabelClass>(), alignment: align_of::<GraniteHeaderLabelClass>()}),
    ("GraniteMessageDialog", Layout {size: size_of::<GraniteMessageDialog>(), alignment: align_of::<GraniteMessageDialog>()}),
    ("GraniteMessageDialogClass", Layout {size: size_of::<GraniteMessageDialogClass>(), alignment: align_of::<GraniteMessageDialogClass>()}),
    ("GraniteModeSwitch", Layout {size: size_of::<GraniteModeSwitch>(), alignment: align_of::<GraniteModeSwitch>()}),
    ("GraniteModeSwitchClass", Layout {size: size_of::<GraniteModeSwitchClass>(), alignment: align_of::<GraniteModeSwitchClass>()}),
    ("GraniteSeekBar", Layout {size: size_of::<GraniteSeekBar>(), alignment: align_of::<GraniteSeekBar>()}),
    ("GraniteSeekBarClass", Layout {size: size_of::<GraniteSeekBarClass>(), alignment: align_of::<GraniteSeekBarClass>()}),
    ("GraniteServicesContractIface", Layout {size: size_of::<GraniteServicesContractIface>(), alignment: align_of::<GraniteServicesContractIface>()}),
    ("GraniteServicesContractorError", Layout {size: size_of::<GraniteServicesContractorError>(), alignment: align_of::<GraniteServicesContractorError>()}),
    ("GraniteServicesContractorProxy", Layout {size: size_of::<GraniteServicesContractorProxy>(), alignment: align_of::<GraniteServicesContractorProxy>()}),
    ("GraniteServicesContractorProxyClass", Layout {size: size_of::<GraniteServicesContractorProxyClass>(), alignment: align_of::<GraniteServicesContractorProxyClass>()}),
    ("GraniteServicesIconFactory", Layout {size: size_of::<GraniteServicesIconFactory>(), alignment: align_of::<GraniteServicesIconFactory>()}),
    ("GraniteServicesIconFactoryClass", Layout {size: size_of::<GraniteServicesIconFactoryClass>(), alignment: align_of::<GraniteServicesIconFactoryClass>()}),
    ("GraniteServicesLogLevel", Layout {size: size_of::<GraniteServicesLogLevel>(), alignment: align_of::<GraniteServicesLogLevel>()}),
    ("GraniteServicesLogger", Layout {size: size_of::<GraniteServicesLogger>(), alignment: align_of::<GraniteServicesLogger>()}),
    ("GraniteServicesLoggerClass", Layout {size: size_of::<GraniteServicesLoggerClass>(), alignment: align_of::<GraniteServicesLoggerClass>()}),
    ("GraniteServicesPaths", Layout {size: size_of::<GraniteServicesPaths>(), alignment: align_of::<GraniteServicesPaths>()}),
    ("GraniteServicesPathsClass", Layout {size: size_of::<GraniteServicesPathsClass>(), alignment: align_of::<GraniteServicesPathsClass>()}),
    ("GraniteServicesSettings", Layout {size: size_of::<GraniteServicesSettings>(), alignment: align_of::<GraniteServicesSettings>()}),
    ("GraniteServicesSettingsClass", Layout {size: size_of::<GraniteServicesSettingsClass>(), alignment: align_of::<GraniteServicesSettingsClass>()}),
    ("GraniteServicesSettingsSerializableIface", Layout {size: size_of::<GraniteServicesSettingsSerializableIface>(), alignment: align_of::<GraniteServicesSettingsSerializableIface>()}),
    ("GraniteServicesSimpleCommand", Layout {size: size_of::<GraniteServicesSimpleCommand>(), alignment: align_of::<GraniteServicesSimpleCommand>()}),
    ("GraniteServicesSimpleCommandClass", Layout {size: size_of::<GraniteServicesSimpleCommandClass>(), alignment: align_of::<GraniteServicesSimpleCommandClass>()}),
    ("GraniteServicesSystem", Layout {size: size_of::<GraniteServicesSystem>(), alignment: align_of::<GraniteServicesSystem>()}),
    ("GraniteServicesSystemClass", Layout {size: size_of::<GraniteServicesSystemClass>(), alignment: align_of::<GraniteServicesSystemClass>()}),
    ("GraniteSettings", Layout {size: size_of::<GraniteSettings>(), alignment: align_of::<GraniteSettings>()}),
    ("GraniteSettingsClass", Layout {size: size_of::<GraniteSettingsClass>(), alignment: align_of::<GraniteSettingsClass>()}),
    ("GraniteSettingsColorScheme", Layout {size: size_of::<GraniteSettingsColorScheme>(), alignment: align_of::<GraniteSettingsColorScheme>()}),
    ("GraniteSettingsPage", Layout {size: size_of::<GraniteSettingsPage>(), alignment: align_of::<GraniteSettingsPage>()}),
    ("GraniteSettingsPageClass", Layout {size: size_of::<GraniteSettingsPageClass>(), alignment: align_of::<GraniteSettingsPageClass>()}),
    ("GraniteSettingsPageStatusType", Layout {size: size_of::<GraniteSettingsPageStatusType>(), alignment: align_of::<GraniteSettingsPageStatusType>()}),
    ("GraniteSettingsSidebar", Layout {size: size_of::<GraniteSettingsSidebar>(), alignment: align_of::<GraniteSettingsSidebar>()}),
    ("GraniteSettingsSidebarClass", Layout {size: size_of::<GraniteSettingsSidebarClass>(), alignment: align_of::<GraniteSettingsSidebarClass>()}),
    ("GraniteSimpleSettingsPage", Layout {size: size_of::<GraniteSimpleSettingsPage>(), alignment: align_of::<GraniteSimpleSettingsPage>()}),
    ("GraniteSimpleSettingsPageClass", Layout {size: size_of::<GraniteSimpleSettingsPageClass>(), alignment: align_of::<GraniteSimpleSettingsPageClass>()}),
    ("GraniteTextStyle", Layout {size: size_of::<GraniteTextStyle>(), alignment: align_of::<GraniteTextStyle>()}),
    ("GraniteWidgetsAboutDialog", Layout {size: size_of::<GraniteWidgetsAboutDialog>(), alignment: align_of::<GraniteWidgetsAboutDialog>()}),
    ("GraniteWidgetsAboutDialogClass", Layout {size: size_of::<GraniteWidgetsAboutDialogClass>(), alignment: align_of::<GraniteWidgetsAboutDialogClass>()}),
    ("GraniteWidgetsAlertView", Layout {size: size_of::<GraniteWidgetsAlertView>(), alignment: align_of::<GraniteWidgetsAlertView>()}),
    ("GraniteWidgetsAlertViewClass", Layout {size: size_of::<GraniteWidgetsAlertViewClass>(), alignment: align_of::<GraniteWidgetsAlertViewClass>()}),
    ("GraniteWidgetsAppMenu", Layout {size: size_of::<GraniteWidgetsAppMenu>(), alignment: align_of::<GraniteWidgetsAppMenu>()}),
    ("GraniteWidgetsAppMenuClass", Layout {size: size_of::<GraniteWidgetsAppMenuClass>(), alignment: align_of::<GraniteWidgetsAppMenuClass>()}),
    ("GraniteWidgetsAvatar", Layout {size: size_of::<GraniteWidgetsAvatar>(), alignment: align_of::<GraniteWidgetsAvatar>()}),
    ("GraniteWidgetsAvatarClass", Layout {size: size_of::<GraniteWidgetsAvatarClass>(), alignment: align_of::<GraniteWidgetsAvatarClass>()}),
    ("GraniteWidgetsCellRendererBadge", Layout {size: size_of::<GraniteWidgetsCellRendererBadge>(), alignment: align_of::<GraniteWidgetsCellRendererBadge>()}),
    ("GraniteWidgetsCellRendererBadgeClass", Layout {size: size_of::<GraniteWidgetsCellRendererBadgeClass>(), alignment: align_of::<GraniteWidgetsCellRendererBadgeClass>()}),
    ("GraniteWidgetsCellRendererExpander", Layout {size: size_of::<GraniteWidgetsCellRendererExpander>(), alignment: align_of::<GraniteWidgetsCellRendererExpander>()}),
    ("GraniteWidgetsCellRendererExpanderClass", Layout {size: size_of::<GraniteWidgetsCellRendererExpanderClass>(), alignment: align_of::<GraniteWidgetsCellRendererExpanderClass>()}),
    ("GraniteWidgetsCollapsiblePaned", Layout {size: size_of::<GraniteWidgetsCollapsiblePaned>(), alignment: align_of::<GraniteWidgetsCollapsiblePaned>()}),
    ("GraniteWidgetsCollapsiblePanedClass", Layout {size: size_of::<GraniteWidgetsCollapsiblePanedClass>(), alignment: align_of::<GraniteWidgetsCollapsiblePanedClass>()}),
    ("GraniteWidgetsCompositedWindow", Layout {size: size_of::<GraniteWidgetsCompositedWindow>(), alignment: align_of::<GraniteWidgetsCompositedWindow>()}),
    ("GraniteWidgetsCompositedWindowClass", Layout {size: size_of::<GraniteWidgetsCompositedWindowClass>(), alignment: align_of::<GraniteWidgetsCompositedWindowClass>()}),
    ("GraniteWidgetsDatePicker", Layout {size: size_of::<GraniteWidgetsDatePicker>(), alignment: align_of::<GraniteWidgetsDatePicker>()}),
    ("GraniteWidgetsDatePickerClass", Layout {size: size_of::<GraniteWidgetsDatePickerClass>(), alignment: align_of::<GraniteWidgetsDatePickerClass>()}),
    ("GraniteWidgetsDynamicNotebook", Layout {size: size_of::<GraniteWidgetsDynamicNotebook>(), alignment: align_of::<GraniteWidgetsDynamicNotebook>()}),
    ("GraniteWidgetsDynamicNotebookClass", Layout {size: size_of::<GraniteWidgetsDynamicNotebookClass>(), alignment: align_of::<GraniteWidgetsDynamicNotebookClass>()}),
    ("GraniteWidgetsDynamicNotebookTabBarBehavior", Layout {size: size_of::<GraniteWidgetsDynamicNotebookTabBarBehavior>(), alignment: align_of::<GraniteWidgetsDynamicNotebookTabBarBehavior>()}),
    ("GraniteWidgetsModeButton", Layout {size: size_of::<GraniteWidgetsModeButton>(), alignment: align_of::<GraniteWidgetsModeButton>()}),
    ("GraniteWidgetsModeButtonClass", Layout {size: size_of::<GraniteWidgetsModeButtonClass>(), alignment: align_of::<GraniteWidgetsModeButtonClass>()}),
    ("GraniteWidgetsOverlayBar", Layout {size: size_of::<GraniteWidgetsOverlayBar>(), alignment: align_of::<GraniteWidgetsOverlayBar>()}),
    ("GraniteWidgetsOverlayBarClass", Layout {size: size_of::<GraniteWidgetsOverlayBarClass>(), alignment: align_of::<GraniteWidgetsOverlayBarClass>()}),
    ("GraniteWidgetsSourceList", Layout {size: size_of::<GraniteWidgetsSourceList>(), alignment: align_of::<GraniteWidgetsSourceList>()}),
    ("GraniteWidgetsSourceListClass", Layout {size: size_of::<GraniteWidgetsSourceListClass>(), alignment: align_of::<GraniteWidgetsSourceListClass>()}),
    ("GraniteWidgetsSourceListDragDestIface", Layout {size: size_of::<GraniteWidgetsSourceListDragDestIface>(), alignment: align_of::<GraniteWidgetsSourceListDragDestIface>()}),
    ("GraniteWidgetsSourceListDragSourceIface", Layout {size: size_of::<GraniteWidgetsSourceListDragSourceIface>(), alignment: align_of::<GraniteWidgetsSourceListDragSourceIface>()}),
    ("GraniteWidgetsSourceListExpandableItem", Layout {size: size_of::<GraniteWidgetsSourceListExpandableItem>(), alignment: align_of::<GraniteWidgetsSourceListExpandableItem>()}),
    ("GraniteWidgetsSourceListExpandableItemClass", Layout {size: size_of::<GraniteWidgetsSourceListExpandableItemClass>(), alignment: align_of::<GraniteWidgetsSourceListExpandableItemClass>()}),
    ("GraniteWidgetsSourceListItem", Layout {size: size_of::<GraniteWidgetsSourceListItem>(), alignment: align_of::<GraniteWidgetsSourceListItem>()}),
    ("GraniteWidgetsSourceListItemClass", Layout {size: size_of::<GraniteWidgetsSourceListItemClass>(), alignment: align_of::<GraniteWidgetsSourceListItemClass>()}),
    ("GraniteWidgetsSourceListSortableIface", Layout {size: size_of::<GraniteWidgetsSourceListSortableIface>(), alignment: align_of::<GraniteWidgetsSourceListSortableIface>()}),
    ("GraniteWidgetsStorageBar", Layout {size: size_of::<GraniteWidgetsStorageBar>(), alignment: align_of::<GraniteWidgetsStorageBar>()}),
    ("GraniteWidgetsStorageBarClass", Layout {size: size_of::<GraniteWidgetsStorageBarClass>(), alignment: align_of::<GraniteWidgetsStorageBarClass>()}),
    ("GraniteWidgetsStorageBarItemDescription", Layout {size: size_of::<GraniteWidgetsStorageBarItemDescription>(), alignment: align_of::<GraniteWidgetsStorageBarItemDescription>()}),
    ("GraniteWidgetsTab", Layout {size: size_of::<GraniteWidgetsTab>(), alignment: align_of::<GraniteWidgetsTab>()}),
    ("GraniteWidgetsTabClass", Layout {size: size_of::<GraniteWidgetsTabClass>(), alignment: align_of::<GraniteWidgetsTabClass>()}),
    ("GraniteWidgetsTimePicker", Layout {size: size_of::<GraniteWidgetsTimePicker>(), alignment: align_of::<GraniteWidgetsTimePicker>()}),
    ("GraniteWidgetsTimePickerClass", Layout {size: size_of::<GraniteWidgetsTimePickerClass>(), alignment: align_of::<GraniteWidgetsTimePickerClass>()}),
    ("GraniteWidgetsToast", Layout {size: size_of::<GraniteWidgetsToast>(), alignment: align_of::<GraniteWidgetsToast>()}),
    ("GraniteWidgetsToastClass", Layout {size: size_of::<GraniteWidgetsToastClass>(), alignment: align_of::<GraniteWidgetsToastClass>()}),
    ("GraniteWidgetsWelcome", Layout {size: size_of::<GraniteWidgetsWelcome>(), alignment: align_of::<GraniteWidgetsWelcome>()}),
    ("GraniteWidgetsWelcomeButton", Layout {size: size_of::<GraniteWidgetsWelcomeButton>(), alignment: align_of::<GraniteWidgetsWelcomeButton>()}),
    ("GraniteWidgetsWelcomeButtonClass", Layout {size: size_of::<GraniteWidgetsWelcomeButtonClass>(), alignment: align_of::<GraniteWidgetsWelcomeButtonClass>()}),
    ("GraniteWidgetsWelcomeClass", Layout {size: size_of::<GraniteWidgetsWelcomeClass>(), alignment: align_of::<GraniteWidgetsWelcomeClass>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) GRANITE_CLOSE_BUTTON_POSITION_LEFT", "0"),
    ("(gint) GRANITE_CLOSE_BUTTON_POSITION_RIGHT", "1"),
    ("(gint) GRANITE_COLLAPSE_MODE_BOTTOM", "2"),
    ("(gint) GRANITE_COLLAPSE_MODE_FIRST", "1"),
    ("(gint) GRANITE_COLLAPSE_MODE_LAST", "2"),
    ("(gint) GRANITE_COLLAPSE_MODE_LEFT", "1"),
    ("(gint) GRANITE_COLLAPSE_MODE_NONE", "0"),
    ("(gint) GRANITE_COLLAPSE_MODE_RIGHT", "2"),
    ("(gint) GRANITE_COLLAPSE_MODE_TOP", "1"),
    ("(gint) GRANITE_SERVICES_CONTRACTOR_ERROR_SERVICE_NOT_AVAILABLE", "0"),
    ("(gint) GRANITE_SERVICES_LOG_LEVEL_DEBUG", "0"),
    ("(gint) GRANITE_SERVICES_LOG_LEVEL_ERROR", "4"),
    ("(gint) GRANITE_SERVICES_LOG_LEVEL_FATAL", "5"),
    ("(gint) GRANITE_SERVICES_LOG_LEVEL_INFO", "1"),
    ("(gint) GRANITE_SERVICES_LOG_LEVEL_NOTIFY", "2"),
    ("(gint) GRANITE_SERVICES_LOG_LEVEL_WARN", "3"),
    ("(gint) GRANITE_SETTINGS_COLOR_SCHEME_DARK", "1"),
    ("(gint) GRANITE_SETTINGS_COLOR_SCHEME_LIGHT", "2"),
    ("(gint) GRANITE_SETTINGS_COLOR_SCHEME_NO_PREFERENCE", "0"),
    ("(gint) GRANITE_SETTINGS_PAGE_STATUS_TYPE_ERROR", "0"),
    ("(gint) GRANITE_SETTINGS_PAGE_STATUS_TYPE_NONE", "4"),
    ("(gint) GRANITE_SETTINGS_PAGE_STATUS_TYPE_OFFLINE", "1"),
    ("(gint) GRANITE_SETTINGS_PAGE_STATUS_TYPE_SUCCESS", "2"),
    ("(gint) GRANITE_SETTINGS_PAGE_STATUS_TYPE_WARNING", "3"),
    ("(gint) GRANITE_TEXT_STYLE_H1", "1"),
    ("(gint) GRANITE_TEXT_STYLE_H2", "2"),
    ("(gint) GRANITE_TEXT_STYLE_H3", "3"),
    ("(gint) GRANITE_TEXT_STYLE_TITLE", "0"),
    ("(gint) GRANITE_WIDGETS_DYNAMIC_NOTEBOOK_TAB_BAR_BEHAVIOR_ALWAYS", "0"),
    ("(gint) GRANITE_WIDGETS_DYNAMIC_NOTEBOOK_TAB_BAR_BEHAVIOR_NEVER", "2"),
    ("(gint) GRANITE_WIDGETS_DYNAMIC_NOTEBOOK_TAB_BAR_BEHAVIOR_SINGLE", "1"),
    ("(gint) GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_APP", "4"),
    ("(gint) GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_AUDIO", "1"),
    ("(gint) GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_FILES", "0"),
    ("(gint) GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_OTHER", "0"),
    ("(gint) GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_PHOTO", "3"),
    ("(gint) GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_VIDEO", "2"),
];



// This file was generated by gir (https://github.com/gtk-rs/gir @ 00040a2)
// from gir-files (https://github.com/gtk-rs/gir-files @ 7c3d3f5+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]

use glib_sys as glib;
use gobject_sys as gobject;
use gio_sys as gio;
use gee_sys as gee;
use gdk_sys as gdk;
use gdk_pixbuf_sys as gdk_pixbuf;
use gtk_sys as gtk;
use pango_sys as pango;
use cairo_sys as cairo;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type GraniteCloseButtonPosition = c_int;
pub const GRANITE_CLOSE_BUTTON_POSITION_LEFT: GraniteCloseButtonPosition = 0;
pub const GRANITE_CLOSE_BUTTON_POSITION_RIGHT: GraniteCloseButtonPosition = 1;

pub type GraniteCollapseMode = c_int;
pub const GRANITE_COLLAPSE_MODE_NONE: GraniteCollapseMode = 0;
pub const GRANITE_COLLAPSE_MODE_LEFT: GraniteCollapseMode = 1;
pub const GRANITE_COLLAPSE_MODE_TOP: GraniteCollapseMode = 1;
pub const GRANITE_COLLAPSE_MODE_FIRST: GraniteCollapseMode = 1;
pub const GRANITE_COLLAPSE_MODE_RIGHT: GraniteCollapseMode = 2;
pub const GRANITE_COLLAPSE_MODE_BOTTOM: GraniteCollapseMode = 2;
pub const GRANITE_COLLAPSE_MODE_LAST: GraniteCollapseMode = 2;

pub type GraniteServicesContractorError = c_int;
pub const GRANITE_SERVICES_CONTRACTOR_ERROR_SERVICE_NOT_AVAILABLE: GraniteServicesContractorError = 0;

pub type GraniteServicesLogLevel = c_int;
pub const GRANITE_SERVICES_LOG_LEVEL_DEBUG: GraniteServicesLogLevel = 0;
pub const GRANITE_SERVICES_LOG_LEVEL_INFO: GraniteServicesLogLevel = 1;
pub const GRANITE_SERVICES_LOG_LEVEL_NOTIFY: GraniteServicesLogLevel = 2;
pub const GRANITE_SERVICES_LOG_LEVEL_WARN: GraniteServicesLogLevel = 3;
pub const GRANITE_SERVICES_LOG_LEVEL_ERROR: GraniteServicesLogLevel = 4;
pub const GRANITE_SERVICES_LOG_LEVEL_FATAL: GraniteServicesLogLevel = 5;

pub type GraniteSettingsColorScheme = c_int;
pub const GRANITE_SETTINGS_COLOR_SCHEME_NO_PREFERENCE: GraniteSettingsColorScheme = 0;
pub const GRANITE_SETTINGS_COLOR_SCHEME_DARK: GraniteSettingsColorScheme = 1;
pub const GRANITE_SETTINGS_COLOR_SCHEME_LIGHT: GraniteSettingsColorScheme = 2;

pub type GraniteSettingsPageStatusType = c_int;
pub const GRANITE_SETTINGS_PAGE_STATUS_TYPE_ERROR: GraniteSettingsPageStatusType = 0;
pub const GRANITE_SETTINGS_PAGE_STATUS_TYPE_OFFLINE: GraniteSettingsPageStatusType = 1;
pub const GRANITE_SETTINGS_PAGE_STATUS_TYPE_SUCCESS: GraniteSettingsPageStatusType = 2;
pub const GRANITE_SETTINGS_PAGE_STATUS_TYPE_WARNING: GraniteSettingsPageStatusType = 3;
pub const GRANITE_SETTINGS_PAGE_STATUS_TYPE_NONE: GraniteSettingsPageStatusType = 4;

pub type GraniteTextStyle = c_int;
pub const GRANITE_TEXT_STYLE_TITLE: GraniteTextStyle = 0;
pub const GRANITE_TEXT_STYLE_H1: GraniteTextStyle = 1;
pub const GRANITE_TEXT_STYLE_H2: GraniteTextStyle = 2;
pub const GRANITE_TEXT_STYLE_H3: GraniteTextStyle = 3;

pub type GraniteWidgetsDynamicNotebookTabBarBehavior = c_int;
pub const GRANITE_WIDGETS_DYNAMIC_NOTEBOOK_TAB_BAR_BEHAVIOR_ALWAYS: GraniteWidgetsDynamicNotebookTabBarBehavior = 0;
pub const GRANITE_WIDGETS_DYNAMIC_NOTEBOOK_TAB_BAR_BEHAVIOR_SINGLE: GraniteWidgetsDynamicNotebookTabBarBehavior = 1;
pub const GRANITE_WIDGETS_DYNAMIC_NOTEBOOK_TAB_BAR_BEHAVIOR_NEVER: GraniteWidgetsDynamicNotebookTabBarBehavior = 2;

pub type GraniteWidgetsStorageBarItemDescription = c_int;
pub const GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_OTHER: GraniteWidgetsStorageBarItemDescription = 0;
pub const GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_AUDIO: GraniteWidgetsStorageBarItemDescription = 1;
pub const GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_VIDEO: GraniteWidgetsStorageBarItemDescription = 2;
pub const GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_PHOTO: GraniteWidgetsStorageBarItemDescription = 3;
pub const GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_APP: GraniteWidgetsStorageBarItemDescription = 4;
pub const GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_FILES: GraniteWidgetsStorageBarItemDescription = 0;

// Callbacks
pub type GraniteWidgetsDroppedDelegate = Option<unsafe extern "C" fn()>;
pub type GraniteWidgetsSourceListVisibleFunc = Option<unsafe extern "C" fn(*mut GraniteWidgetsSourceListItem, *mut c_void) -> gboolean>;

// Records
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteAccelLabelClass {
    pub parent_class: gtk::GtkGridClass,
}

impl ::std::fmt::Debug for GraniteAccelLabelClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteAccelLabelClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteAccelLabelPrivate(c_void);

pub type GraniteAccelLabelPrivate = *mut _GraniteAccelLabelPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteApplicationClass {
    pub parent_class: gtk::GtkApplicationClass,
    pub set_options: Option<unsafe extern "C" fn(*mut GraniteApplication)>,
    pub show_about: Option<unsafe extern "C" fn(*mut GraniteApplication, *mut gtk::GtkWidget)>,
}

impl ::std::fmt::Debug for GraniteApplicationClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteApplicationClass @ {:?}", self as *const _))
         .field("set_options", &self.set_options)
         .field("show_about", &self.show_about)
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteApplicationPrivate(c_void);

pub type GraniteApplicationPrivate = *mut _GraniteApplicationPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteAsyncImageClass {
    pub parent_class: gtk::GtkImageClass,
}

impl ::std::fmt::Debug for GraniteAsyncImageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteAsyncImageClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteAsyncImagePrivate(c_void);

pub type GraniteAsyncImagePrivate = *mut _GraniteAsyncImagePrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteDrawingBufferSurfaceClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteDrawingBufferSurfaceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteDrawingBufferSurfaceClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteDrawingBufferSurfacePrivate(c_void);

pub type GraniteDrawingBufferSurfacePrivate = *mut _GraniteDrawingBufferSurfacePrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteDrawingColorClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteDrawingColorClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteDrawingColorClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteDrawingColorPrivate(c_void);

pub type GraniteDrawingColorPrivate = *mut _GraniteDrawingColorPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteDrawingUtilitiesClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteDrawingUtilitiesClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteDrawingUtilitiesClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteDrawingUtilitiesPrivate(c_void);

pub type GraniteDrawingUtilitiesPrivate = *mut _GraniteDrawingUtilitiesPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteGtkPatchAboutDialogClass {
    pub parent_class: gtk::GtkDialogClass,
    pub activate_link: Option<unsafe extern "C" fn(*const c_char) -> gboolean>,
}

impl ::std::fmt::Debug for GraniteGtkPatchAboutDialogClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteGtkPatchAboutDialogClass @ {:?}", self as *const _))
         .field("activate_link", &self.activate_link)
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteGtkPatchAboutDialogPrivate(c_void);

pub type GraniteGtkPatchAboutDialogPrivate = *mut _GraniteGtkPatchAboutDialogPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteHeaderLabelClass {
    pub parent_class: gtk::GtkLabelClass,
}

impl ::std::fmt::Debug for GraniteHeaderLabelClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteHeaderLabelClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteHeaderLabelPrivate(c_void);

pub type GraniteHeaderLabelPrivate = *mut _GraniteHeaderLabelPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteMessageDialogClass {
    pub parent_class: gtk::GtkDialogClass,
}

impl ::std::fmt::Debug for GraniteMessageDialogClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteMessageDialogClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteMessageDialogPrivate(c_void);

pub type GraniteMessageDialogPrivate = *mut _GraniteMessageDialogPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteModeSwitchClass {
    pub parent_class: gtk::GtkGridClass,
}

impl ::std::fmt::Debug for GraniteModeSwitchClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteModeSwitchClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteModeSwitchPrivate(c_void);

pub type GraniteModeSwitchPrivate = *mut _GraniteModeSwitchPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteSeekBarClass {
    pub parent_class: gtk::GtkGridClass,
}

impl ::std::fmt::Debug for GraniteSeekBarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSeekBarClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteSeekBarPrivate(c_void);

pub type GraniteSeekBarPrivate = *mut _GraniteSeekBarPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesContractIface {
    pub parent_iface: gobject::GTypeInterface,
    pub get_display_name: Option<unsafe extern "C" fn(*mut GraniteServicesContract) -> *mut c_char>,
    pub get_description: Option<unsafe extern "C" fn(*mut GraniteServicesContract) -> *mut c_char>,
    pub get_icon: Option<unsafe extern "C" fn(*mut GraniteServicesContract) -> *mut gio::GIcon>,
    pub execute_with_file: Option<unsafe extern "C" fn(*mut GraniteServicesContract, *mut gio::GFile, *mut *mut glib::GError)>,
    pub execute_with_files: Option<unsafe extern "C" fn(*mut GraniteServicesContract, *mut *mut gio::GFile, c_int, *mut *mut glib::GError)>,
}

impl ::std::fmt::Debug for GraniteServicesContractIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesContractIface @ {:?}", self as *const _))
         .field("get_display_name", &self.get_display_name)
         .field("get_description", &self.get_description)
         .field("get_icon", &self.get_icon)
         .field("execute_with_file", &self.execute_with_file)
         .field("execute_with_files", &self.execute_with_files)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesContractorProxyClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteServicesContractorProxyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesContractorProxyClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteServicesContractorProxyPrivate(c_void);

pub type GraniteServicesContractorProxyPrivate = *mut _GraniteServicesContractorProxyPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesIconFactoryClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteServicesIconFactoryClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesIconFactoryClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteServicesIconFactoryPrivate(c_void);

pub type GraniteServicesIconFactoryPrivate = *mut _GraniteServicesIconFactoryPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesLoggerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteServicesLoggerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesLoggerClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteServicesLoggerPrivate(c_void);

pub type GraniteServicesLoggerPrivate = *mut _GraniteServicesLoggerPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesPathsClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteServicesPathsClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesPathsClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteServicesPathsPrivate(c_void);

pub type GraniteServicesPathsPrivate = *mut _GraniteServicesPathsPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesSettingsClass {
    pub parent_class: gobject::GObjectClass,
    pub verify: Option<unsafe extern "C" fn(*mut GraniteServicesSettings, *const c_char)>,
}

impl ::std::fmt::Debug for GraniteServicesSettingsClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesSettingsClass @ {:?}", self as *const _))
         .field("verify", &self.verify)
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteServicesSettingsPrivate(c_void);

pub type GraniteServicesSettingsPrivate = *mut _GraniteServicesSettingsPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesSettingsSerializableIface {
    pub parent_iface: gobject::GTypeInterface,
    pub settings_serialize: Option<unsafe extern "C" fn(*mut GraniteServicesSettingsSerializable) -> *mut c_char>,
    pub settings_deserialize: Option<unsafe extern "C" fn(*mut GraniteServicesSettingsSerializable, *const c_char)>,
}

impl ::std::fmt::Debug for GraniteServicesSettingsSerializableIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesSettingsSerializableIface @ {:?}", self as *const _))
         .field("settings_serialize", &self.settings_serialize)
         .field("settings_deserialize", &self.settings_deserialize)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesSimpleCommandClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteServicesSimpleCommandClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesSimpleCommandClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteServicesSimpleCommandPrivate(c_void);

pub type GraniteServicesSimpleCommandPrivate = *mut _GraniteServicesSimpleCommandPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesSystemClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteServicesSystemClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesSystemClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteServicesSystemPrivate(c_void);

pub type GraniteServicesSystemPrivate = *mut _GraniteServicesSystemPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteSettingsClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteSettingsClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettingsClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteSettingsPageClass {
    pub parent_class: gtk::GtkScrolledWindowClass,
}

impl ::std::fmt::Debug for GraniteSettingsPageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettingsPageClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteSettingsPagePrivate(c_void);

pub type GraniteSettingsPagePrivate = *mut _GraniteSettingsPagePrivate;

#[repr(C)]
pub struct _GraniteSettingsPrivate(c_void);

pub type GraniteSettingsPrivate = *mut _GraniteSettingsPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteSettingsSidebarClass {
    pub parent_class: gtk::GtkScrolledWindowClass,
}

impl ::std::fmt::Debug for GraniteSettingsSidebarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettingsSidebarClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteSettingsSidebarPrivate(c_void);

pub type GraniteSettingsSidebarPrivate = *mut _GraniteSettingsSidebarPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteSimpleSettingsPageClass {
    pub parent_class: GraniteSettingsPageClass,
}

impl ::std::fmt::Debug for GraniteSimpleSettingsPageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSimpleSettingsPageClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteSimpleSettingsPagePrivate(c_void);

pub type GraniteSimpleSettingsPagePrivate = *mut _GraniteSimpleSettingsPagePrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsAboutDialogClass {
    pub parent_class: GraniteGtkPatchAboutDialogClass,
}

impl ::std::fmt::Debug for GraniteWidgetsAboutDialogClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsAboutDialogClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsAboutDialogPrivate(c_void);

pub type GraniteWidgetsAboutDialogPrivate = *mut _GraniteWidgetsAboutDialogPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsAlertViewClass {
    pub parent_class: gtk::GtkGridClass,
}

impl ::std::fmt::Debug for GraniteWidgetsAlertViewClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsAlertViewClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsAlertViewPrivate(c_void);

pub type GraniteWidgetsAlertViewPrivate = *mut _GraniteWidgetsAlertViewPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsAppMenuClass {
    pub parent_class: gtk::GtkMenuButtonClass,
}

impl ::std::fmt::Debug for GraniteWidgetsAppMenuClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsAppMenuClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsAppMenuPrivate(c_void);

pub type GraniteWidgetsAppMenuPrivate = *mut _GraniteWidgetsAppMenuPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsAvatarClass {
    pub parent_class: gtk::GtkEventBoxClass,
}

impl ::std::fmt::Debug for GraniteWidgetsAvatarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsAvatarClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsAvatarPrivate(c_void);

pub type GraniteWidgetsAvatarPrivate = *mut _GraniteWidgetsAvatarPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsCellRendererBadgeClass {
    pub parent_class: gtk::GtkCellRendererClass,
}

impl ::std::fmt::Debug for GraniteWidgetsCellRendererBadgeClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsCellRendererBadgeClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsCellRendererBadgePrivate(c_void);

pub type GraniteWidgetsCellRendererBadgePrivate = *mut _GraniteWidgetsCellRendererBadgePrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsCellRendererExpanderClass {
    pub parent_class: gtk::GtkCellRendererClass,
    pub get_arrow_size: Option<unsafe extern "C" fn(*mut GraniteWidgetsCellRendererExpander, *mut gtk::GtkWidget) -> c_int>,
}

impl ::std::fmt::Debug for GraniteWidgetsCellRendererExpanderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsCellRendererExpanderClass @ {:?}", self as *const _))
         .field("get_arrow_size", &self.get_arrow_size)
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsCellRendererExpanderPrivate(c_void);

pub type GraniteWidgetsCellRendererExpanderPrivate = *mut _GraniteWidgetsCellRendererExpanderPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsCollapsiblePanedClass {
    pub parent_class: gtk::GtkPanedClass,
}

impl ::std::fmt::Debug for GraniteWidgetsCollapsiblePanedClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsCollapsiblePanedClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsCollapsiblePanedPrivate(c_void);

pub type GraniteWidgetsCollapsiblePanedPrivate = *mut _GraniteWidgetsCollapsiblePanedPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsCompositedWindowClass {
    pub parent_class: gtk::GtkWindowClass,
}

impl ::std::fmt::Debug for GraniteWidgetsCompositedWindowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsCompositedWindowClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsCompositedWindowPrivate(c_void);

pub type GraniteWidgetsCompositedWindowPrivate = *mut _GraniteWidgetsCompositedWindowPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsDatePickerClass {
    pub parent_class: gtk::GtkEntryClass,
    pub position_dropdown: Option<unsafe extern "C" fn(*mut GraniteWidgetsDatePicker, *mut gdk::GdkRectangle)>,
}

impl ::std::fmt::Debug for GraniteWidgetsDatePickerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsDatePickerClass @ {:?}", self as *const _))
         .field("position_dropdown", &self.position_dropdown)
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsDatePickerPrivate(c_void);

pub type GraniteWidgetsDatePickerPrivate = *mut _GraniteWidgetsDatePickerPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsDynamicNotebookClass {
    pub parent_class: gtk::GtkEventBoxClass,
}

impl ::std::fmt::Debug for GraniteWidgetsDynamicNotebookClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsDynamicNotebookClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsDynamicNotebookPrivate(c_void);

pub type GraniteWidgetsDynamicNotebookPrivate = *mut _GraniteWidgetsDynamicNotebookPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsModeButtonClass {
    pub parent_class: gtk::GtkBoxClass,
}

impl ::std::fmt::Debug for GraniteWidgetsModeButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsModeButtonClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsModeButtonPrivate(c_void);

pub type GraniteWidgetsModeButtonPrivate = *mut _GraniteWidgetsModeButtonPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsOverlayBarClass {
    pub parent_class: gtk::GtkEventBoxClass,
}

impl ::std::fmt::Debug for GraniteWidgetsOverlayBarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsOverlayBarClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsOverlayBarPrivate(c_void);

pub type GraniteWidgetsOverlayBarPrivate = *mut _GraniteWidgetsOverlayBarPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsSourceListClass {
    pub parent_class: gtk::GtkScrolledWindowClass,
    pub item_selected: Option<unsafe extern "C" fn(*mut GraniteWidgetsSourceListItem)>,
}

impl ::std::fmt::Debug for GraniteWidgetsSourceListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsSourceListClass @ {:?}", self as *const _))
         .field("item_selected", &self.item_selected)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsSourceListDragDestIface {
    pub parent_iface: gobject::GTypeInterface,
    pub data_drop_possible: Option<unsafe extern "C" fn(*mut GraniteWidgetsSourceListDragDest, *mut gdk::GdkDragContext, *mut gtk::GtkSelectionData) -> gboolean>,
    pub data_received: Option<unsafe extern "C" fn(*mut GraniteWidgetsSourceListDragDest, *mut gdk::GdkDragContext, *mut gtk::GtkSelectionData) -> gdk::GdkDragAction>,
}

impl ::std::fmt::Debug for GraniteWidgetsSourceListDragDestIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsSourceListDragDestIface @ {:?}", self as *const _))
         .field("data_drop_possible", &self.data_drop_possible)
         .field("data_received", &self.data_received)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsSourceListDragSourceIface {
    pub parent_iface: gobject::GTypeInterface,
    pub draggable: Option<unsafe extern "C" fn(*mut GraniteWidgetsSourceListDragSource) -> gboolean>,
    pub prepare_selection_data: Option<unsafe extern "C" fn(*mut GraniteWidgetsSourceListDragSource, *mut gtk::GtkSelectionData)>,
}

impl ::std::fmt::Debug for GraniteWidgetsSourceListDragSourceIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsSourceListDragSourceIface @ {:?}", self as *const _))
         .field("draggable", &self.draggable)
         .field("prepare_selection_data", &self.prepare_selection_data)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsSourceListExpandableItemClass {
    pub parent_class: GraniteWidgetsSourceListItemClass,
    pub toggled: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for GraniteWidgetsSourceListExpandableItemClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsSourceListExpandableItemClass @ {:?}", self as *const _))
         .field("toggled", &self.toggled)
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsSourceListExpandableItemPrivate(c_void);

pub type GraniteWidgetsSourceListExpandableItemPrivate = *mut _GraniteWidgetsSourceListExpandableItemPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsSourceListItemClass {
    pub parent_class: gobject::GObjectClass,
    pub get_context_menu: Option<unsafe extern "C" fn(*mut GraniteWidgetsSourceListItem) -> *mut gtk::GtkMenu>,
    pub edited: Option<unsafe extern "C" fn(*const c_char)>,
    pub action_activated: Option<unsafe extern "C" fn()>,
    pub activated: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for GraniteWidgetsSourceListItemClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsSourceListItemClass @ {:?}", self as *const _))
         .field("get_context_menu", &self.get_context_menu)
         .field("edited", &self.edited)
         .field("action_activated", &self.action_activated)
         .field("activated", &self.activated)
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsSourceListItemPrivate(c_void);

pub type GraniteWidgetsSourceListItemPrivate = *mut _GraniteWidgetsSourceListItemPrivate;

#[repr(C)]
pub struct _GraniteWidgetsSourceListPrivate(c_void);

pub type GraniteWidgetsSourceListPrivate = *mut _GraniteWidgetsSourceListPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsSourceListSortableIface {
    pub parent_iface: gobject::GTypeInterface,
    pub allow_dnd_sorting: Option<unsafe extern "C" fn(*mut GraniteWidgetsSourceListSortable) -> gboolean>,
    pub compare: Option<unsafe extern "C" fn(*mut GraniteWidgetsSourceListSortable, *mut GraniteWidgetsSourceListItem, *mut GraniteWidgetsSourceListItem) -> c_int>,
}

impl ::std::fmt::Debug for GraniteWidgetsSourceListSortableIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsSourceListSortableIface @ {:?}", self as *const _))
         .field("allow_dnd_sorting", &self.allow_dnd_sorting)
         .field("compare", &self.compare)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsStorageBarClass {
    pub parent_class: gtk::GtkBoxClass,
}

impl ::std::fmt::Debug for GraniteWidgetsStorageBarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsStorageBarClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsStorageBarPrivate(c_void);

pub type GraniteWidgetsStorageBarPrivate = *mut _GraniteWidgetsStorageBarPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsTabClass {
    pub parent_class: gtk::GtkEventBoxClass,
}

impl ::std::fmt::Debug for GraniteWidgetsTabClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsTabClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsTabPrivate(c_void);

pub type GraniteWidgetsTabPrivate = *mut _GraniteWidgetsTabPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsTimePickerClass {
    pub parent_class: gtk::GtkEntryClass,
    pub position_dropdown: Option<unsafe extern "C" fn(*mut GraniteWidgetsTimePicker, *mut c_int, *mut c_int)>,
}

impl ::std::fmt::Debug for GraniteWidgetsTimePickerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsTimePickerClass @ {:?}", self as *const _))
         .field("position_dropdown", &self.position_dropdown)
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsTimePickerPrivate(c_void);

pub type GraniteWidgetsTimePickerPrivate = *mut _GraniteWidgetsTimePickerPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsToastClass {
    pub parent_class: gtk::GtkRevealerClass,
}

impl ::std::fmt::Debug for GraniteWidgetsToastClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsToastClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsToastPrivate(c_void);

pub type GraniteWidgetsToastPrivate = *mut _GraniteWidgetsToastPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsWelcomeButtonClass {
    pub parent_class: gtk::GtkButtonClass,
}

impl ::std::fmt::Debug for GraniteWidgetsWelcomeButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsWelcomeButtonClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsWelcomeButtonPrivate(c_void);

pub type GraniteWidgetsWelcomeButtonPrivate = *mut _GraniteWidgetsWelcomeButtonPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsWelcomeClass {
    pub parent_class: gtk::GtkEventBoxClass,
}

impl ::std::fmt::Debug for GraniteWidgetsWelcomeClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsWelcomeClass @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _GraniteWidgetsWelcomePrivate(c_void);

pub type GraniteWidgetsWelcomePrivate = *mut _GraniteWidgetsWelcomePrivate;

// Classes
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteAccelLabel {
    pub parent_instance: gtk::GtkGrid,
    pub priv_: *mut GraniteAccelLabelPrivate,
}

impl ::std::fmt::Debug for GraniteAccelLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteAccelLabel @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteApplication {
    pub parent_instance: gtk::GtkApplication,
    pub build_data_dir: *mut c_char,
    pub build_pkg_data_dir: *mut c_char,
    pub build_release_name: *mut c_char,
    pub build_version: *mut c_char,
    pub build_version_info: *mut c_char,
    pub program_name: *mut c_char,
    pub exec_name: *mut c_char,
    pub app_copyright: *mut c_char,
    pub app_years: *mut c_char,
    pub app_icon: *mut c_char,
    pub app_launcher: *mut c_char,
    pub main_url: *mut c_char,
    pub bug_url: *mut c_char,
    pub help_url: *mut c_char,
    pub translate_url: *mut c_char,
    pub about_authors: *mut *mut c_char,
    pub about_authors_length1: c_int,
    pub about_documenters: *mut *mut c_char,
    pub about_documenters_length1: c_int,
    pub about_artists: *mut *mut c_char,
    pub about_artists_length1: c_int,
    pub about_comments: *mut c_char,
    pub about_translators: *mut c_char,
    pub about_license: *mut c_char,
    pub about_license_type: gtk::GtkLicense,
    pub granite_application_DEBUG: gboolean,
    pub about_dlg: *mut GraniteWidgetsAboutDialog,
    pub priv_: *mut GraniteApplicationPrivate,
}

impl ::std::fmt::Debug for GraniteApplication {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteApplication @ {:?}", self as *const _))
         .field("build_data_dir", &self.build_data_dir)
         .field("build_pkg_data_dir", &self.build_pkg_data_dir)
         .field("build_release_name", &self.build_release_name)
         .field("build_version", &self.build_version)
         .field("build_version_info", &self.build_version_info)
         .field("program_name", &self.program_name)
         .field("exec_name", &self.exec_name)
         .field("app_copyright", &self.app_copyright)
         .field("app_years", &self.app_years)
         .field("app_icon", &self.app_icon)
         .field("app_launcher", &self.app_launcher)
         .field("main_url", &self.main_url)
         .field("bug_url", &self.bug_url)
         .field("help_url", &self.help_url)
         .field("translate_url", &self.translate_url)
         .field("about_authors", &self.about_authors)
         .field("about_authors_length1", &self.about_authors_length1)
         .field("about_documenters", &self.about_documenters)
         .field("about_documenters_length1", &self.about_documenters_length1)
         .field("about_artists", &self.about_artists)
         .field("about_artists_length1", &self.about_artists_length1)
         .field("about_comments", &self.about_comments)
         .field("about_translators", &self.about_translators)
         .field("about_license", &self.about_license)
         .field("about_license_type", &self.about_license_type)
         .field("granite_application_DEBUG", &self.granite_application_DEBUG)
         .field("about_dlg", &self.about_dlg)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteAsyncImage {
    pub parent_instance: gtk::GtkImage,
    pub priv_: *mut GraniteAsyncImagePrivate,
}

impl ::std::fmt::Debug for GraniteAsyncImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteAsyncImage @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteDrawingBufferSurface {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteDrawingBufferSurfacePrivate,
}

impl ::std::fmt::Debug for GraniteDrawingBufferSurface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteDrawingBufferSurface @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteDrawingColor {
    pub parent_instance: gobject::GObject,
    pub R: c_double,
    pub G: c_double,
    pub B: c_double,
    pub A: c_double,
    pub priv_: *mut GraniteDrawingColorPrivate,
}

impl ::std::fmt::Debug for GraniteDrawingColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteDrawingColor @ {:?}", self as *const _))
         .field("R", &self.R)
         .field("G", &self.G)
         .field("B", &self.B)
         .field("A", &self.A)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteDrawingUtilities {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteDrawingUtilitiesPrivate,
}

impl ::std::fmt::Debug for GraniteDrawingUtilities {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteDrawingUtilities @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteGtkPatchAboutDialog {
    pub parent_instance: gtk::GtkDialog,
    pub priv_: *mut GraniteGtkPatchAboutDialogPrivate,
}

impl ::std::fmt::Debug for GraniteGtkPatchAboutDialog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteGtkPatchAboutDialog @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteHeaderLabel {
    pub parent_instance: gtk::GtkLabel,
    pub priv_: *mut GraniteHeaderLabelPrivate,
}

impl ::std::fmt::Debug for GraniteHeaderLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteHeaderLabel @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteMessageDialog {
    pub parent_instance: gtk::GtkDialog,
    pub priv_: *mut GraniteMessageDialogPrivate,
}

impl ::std::fmt::Debug for GraniteMessageDialog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteMessageDialog @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteModeSwitch {
    pub parent_instance: gtk::GtkGrid,
    pub priv_: *mut GraniteModeSwitchPrivate,
}

impl ::std::fmt::Debug for GraniteModeSwitch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteModeSwitch @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteSeekBar {
    pub parent_instance: gtk::GtkGrid,
    pub priv_: *mut GraniteSeekBarPrivate,
}

impl ::std::fmt::Debug for GraniteSeekBar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSeekBar @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesContractorProxy {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteServicesContractorProxyPrivate,
}

impl ::std::fmt::Debug for GraniteServicesContractorProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesContractorProxy @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesIconFactory {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteServicesIconFactoryPrivate,
}

impl ::std::fmt::Debug for GraniteServicesIconFactory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesIconFactory @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesLogger {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteServicesLoggerPrivate,
}

impl ::std::fmt::Debug for GraniteServicesLogger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesLogger @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesPaths {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteServicesPathsPrivate,
}

impl ::std::fmt::Debug for GraniteServicesPaths {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesPaths @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesSettings {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteServicesSettingsPrivate,
}

impl ::std::fmt::Debug for GraniteServicesSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesSettings @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesSimpleCommand {
    pub parent_instance: gobject::GObject,
    pub standard_output_str: *mut c_char,
    pub error_output_str: *mut c_char,
    pub output_str: *mut c_char,
    pub priv_: *mut GraniteServicesSimpleCommandPrivate,
}

impl ::std::fmt::Debug for GraniteServicesSimpleCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesSimpleCommand @ {:?}", self as *const _))
         .field("standard_output_str", &self.standard_output_str)
         .field("error_output_str", &self.error_output_str)
         .field("output_str", &self.output_str)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteServicesSystem {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteServicesSystemPrivate,
}

impl ::std::fmt::Debug for GraniteServicesSystem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesSystem @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteSettings {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteSettingsPrivate,
}

impl ::std::fmt::Debug for GraniteSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettings @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteSettingsPage {
    pub parent_instance: gtk::GtkScrolledWindow,
    pub _icon_name: *mut c_char,
    pub _title: *mut c_char,
    pub priv_: *mut GraniteSettingsPagePrivate,
}

impl ::std::fmt::Debug for GraniteSettingsPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettingsPage @ {:?}", self as *const _))
         .field("_icon_name", &self._icon_name)
         .field("_title", &self._title)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteSettingsSidebar {
    pub parent_instance: gtk::GtkScrolledWindow,
    pub priv_: *mut GraniteSettingsSidebarPrivate,
}

impl ::std::fmt::Debug for GraniteSettingsSidebar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettingsSidebar @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteSimpleSettingsPage {
    pub parent_instance: GraniteSettingsPage,
    pub priv_: *mut GraniteSimpleSettingsPagePrivate,
}

impl ::std::fmt::Debug for GraniteSimpleSettingsPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSimpleSettingsPage @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsAboutDialog {
    pub parent_instance: GraniteGtkPatchAboutDialog,
    pub priv_: *mut GraniteWidgetsAboutDialogPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsAboutDialog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsAboutDialog @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsAlertView {
    pub parent_instance: gtk::GtkGrid,
    pub priv_: *mut GraniteWidgetsAlertViewPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsAlertView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsAlertView @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsAppMenu {
    pub parent_instance: gtk::GtkMenuButton,
    pub about_item: *mut gtk::GtkMenuItem,
    pub priv_: *mut GraniteWidgetsAppMenuPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsAppMenu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsAppMenu @ {:?}", self as *const _))
         .field("about_item", &self.about_item)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsAvatar {
    pub parent_instance: gtk::GtkEventBox,
    pub priv_: *mut GraniteWidgetsAvatarPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsAvatar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsAvatar @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsCellRendererBadge {
    pub parent_instance: gtk::GtkCellRenderer,
    pub priv_: *mut GraniteWidgetsCellRendererBadgePrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsCellRendererBadge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsCellRendererBadge @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsCellRendererExpander {
    pub parent_instance: gtk::GtkCellRenderer,
    pub priv_: *mut GraniteWidgetsCellRendererExpanderPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsCellRendererExpander {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsCellRendererExpander @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsCollapsiblePaned {
    pub parent_instance: gtk::GtkPaned,
    pub priv_: *mut GraniteWidgetsCollapsiblePanedPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsCollapsiblePaned {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsCollapsiblePaned @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsCompositedWindow {
    pub parent_instance: gtk::GtkWindow,
    pub priv_: *mut GraniteWidgetsCompositedWindowPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsCompositedWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsCompositedWindow @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsDatePicker {
    pub parent_instance: gtk::GtkEntry,
    pub dropdown: *mut gtk::GtkEventBox,
    pub calendar: *mut gtk::GtkCalendar,
    pub priv_: *mut GraniteWidgetsDatePickerPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsDatePicker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsDatePicker @ {:?}", self as *const _))
         .field("dropdown", &self.dropdown)
         .field("calendar", &self.calendar)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsDynamicNotebook {
    pub parent_instance: gtk::GtkEventBox,
    pub priv_: *mut GraniteWidgetsDynamicNotebookPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsDynamicNotebook {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsDynamicNotebook @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsModeButton {
    pub parent_instance: gtk::GtkBox,
    pub priv_: *mut GraniteWidgetsModeButtonPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsModeButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsModeButton @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsOverlayBar {
    pub parent_instance: gtk::GtkEventBox,
    pub priv_: *mut GraniteWidgetsOverlayBarPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsOverlayBar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsOverlayBar @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsSourceList {
    pub parent_instance: gtk::GtkScrolledWindow,
    pub priv_: *mut GraniteWidgetsSourceListPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsSourceList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsSourceList @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsSourceListExpandableItem {
    pub parent_instance: GraniteWidgetsSourceListItem,
    pub priv_: *mut GraniteWidgetsSourceListExpandableItemPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsSourceListExpandableItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsSourceListExpandableItem @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsSourceListItem {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteWidgetsSourceListItemPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsSourceListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsSourceListItem @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsStorageBar {
    pub parent_instance: gtk::GtkBox,
    pub priv_: *mut GraniteWidgetsStorageBarPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsStorageBar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsStorageBar @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsTab {
    pub parent_instance: gtk::GtkEventBox,
    pub dropped_callback: GraniteWidgetsDroppedDelegate,
    pub dropped_callback_target: gpointer,
    pub dropped_callback_target_destroy_notify: glib::GDestroyNotify,
    pub priv_: *mut GraniteWidgetsTabPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsTab {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsTab @ {:?}", self as *const _))
         .field("dropped_callback", &self.dropped_callback)
         .field("dropped_callback_target", &self.dropped_callback_target)
         .field("dropped_callback_target_destroy_notify", &self.dropped_callback_target_destroy_notify)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsTimePicker {
    pub parent_instance: gtk::GtkEntry,
    pub priv_: *mut GraniteWidgetsTimePickerPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsTimePicker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsTimePicker @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsToast {
    pub parent_instance: gtk::GtkRevealer,
    pub priv_: *mut GraniteWidgetsToastPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsToast {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsToast @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsWelcome {
    pub parent_instance: gtk::GtkEventBox,
    pub children: *mut glib::GList,
    pub options: *mut gtk::GtkGrid,
    pub priv_: *mut GraniteWidgetsWelcomePrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsWelcome {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsWelcome @ {:?}", self as *const _))
         .field("children", &self.children)
         .field("options", &self.options)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraniteWidgetsWelcomeButton {
    pub parent_instance: gtk::GtkButton,
    pub priv_: *mut GraniteWidgetsWelcomeButtonPrivate,
}

impl ::std::fmt::Debug for GraniteWidgetsWelcomeButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteWidgetsWelcomeButton @ {:?}", self as *const _))
         .finish()
    }
}

// Interfaces
#[repr(C)]
pub struct GraniteServicesContract(c_void);

impl ::std::fmt::Debug for GraniteServicesContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "GraniteServicesContract @ {:?}", self as *const _)
    }
}

#[repr(C)]
pub struct GraniteServicesSettingsSerializable(c_void);

impl ::std::fmt::Debug for GraniteServicesSettingsSerializable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "GraniteServicesSettingsSerializable @ {:?}", self as *const _)
    }
}

#[repr(C)]
pub struct GraniteWidgetsSourceListDragDest(c_void);

impl ::std::fmt::Debug for GraniteWidgetsSourceListDragDest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "GraniteWidgetsSourceListDragDest @ {:?}", self as *const _)
    }
}

#[repr(C)]
pub struct GraniteWidgetsSourceListDragSource(c_void);

impl ::std::fmt::Debug for GraniteWidgetsSourceListDragSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "GraniteWidgetsSourceListDragSource @ {:?}", self as *const _)
    }
}

#[repr(C)]
pub struct GraniteWidgetsSourceListSortable(c_void);

impl ::std::fmt::Debug for GraniteWidgetsSourceListSortable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "GraniteWidgetsSourceListSortable @ {:?}", self as *const _)
    }
}


extern "C" {

    //=========================================================================
    // GraniteCloseButtonPosition
    //=========================================================================
    pub fn granite_close_button_position_get_type() -> GType;

    //=========================================================================
    // GraniteCollapseMode
    //=========================================================================
    pub fn granite_collapse_mode_get_type() -> GType;

    //=========================================================================
    // GraniteServicesLogLevel
    //=========================================================================
    pub fn granite_services_log_level_get_type() -> GType;

    //=========================================================================
    // GraniteSettingsColorScheme
    //=========================================================================
    pub fn granite_settings_color_scheme_get_type() -> GType;

    //=========================================================================
    // GraniteSettingsPageStatusType
    //=========================================================================
    pub fn granite_settings_page_status_type_get_type() -> GType;

    //=========================================================================
    // GraniteTextStyle
    //=========================================================================
    pub fn granite_text_style_get_type() -> GType;

    //=========================================================================
    // GraniteWidgetsDynamicNotebookTabBarBehavior
    //=========================================================================
    pub fn granite_widgets_dynamic_notebook_tab_bar_behavior_get_type() -> GType;

    //=========================================================================
    // GraniteWidgetsStorageBarItemDescription
    //=========================================================================
    pub fn granite_widgets_storage_bar_item_description_get_type() -> GType;

    //=========================================================================
    // GraniteAccelLabel
    //=========================================================================
    pub fn granite_accel_label_get_type() -> GType;
    pub fn granite_accel_label_get_action_name() -> *const c_char;
    pub fn granite_accel_label_set_action_name(value: *const c_char);
    pub fn granite_accel_label_get_accel_string() -> *const c_char;
    pub fn granite_accel_label_set_accel_string(value: *const c_char);
    pub fn granite_accel_label_get_label() -> *const c_char;
    pub fn granite_accel_label_set_label(value: *const c_char);
    pub fn granite_accel_label_new(label: *const c_char, accel_string: *const c_char) -> *mut GraniteAccelLabel;
    pub fn granite_accel_label_new_from_action_name(label: *const c_char, action_name: *const c_char) -> *mut GraniteAccelLabel;

    //=========================================================================
    // GraniteApplication
    //=========================================================================
    pub fn granite_application_get_type() -> GType;
    pub fn granite_application_run(args: *mut *mut c_char, args_length1: c_int) -> c_int;
    pub fn granite_application_set_options();
    pub fn granite_application_create_appmenu(menu: *mut gtk::GtkMenu) -> *mut GraniteWidgetsAppMenu;
    pub fn granite_application_show_about(parent: *mut gtk::GtkWidget);

    //=========================================================================
    // GraniteAsyncImage
    //=========================================================================
    pub fn granite_async_image_get_type() -> GType;
    pub fn granite_async_image_get_gicon_async() -> *mut gio::GIcon;
    pub fn granite_async_image_get_size_async() -> c_int;
    pub fn granite_async_image_new(load_on_realize: gboolean, auto_size_request: gboolean) -> *mut GraniteAsyncImage;
    pub fn granite_async_image_new_from_gicon_async(icon: *mut gio::GIcon, size: c_int, load_on_realize: gboolean, auto_size_request: gboolean) -> *mut GraniteAsyncImage;
    pub fn granite_async_image_new_from_icon_name_async(icon_name: *const c_char, icon_size: gtk::GtkIconSize, load_on_realize: gboolean, auto_size_request: gboolean) -> *mut GraniteAsyncImage;
    pub fn granite_async_image_set_from_gicon_async(icon: *mut gio::GIcon, size: c_int, cancellable: *mut gio::GCancellable, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn granite_async_image_set_from_gicon_finish(_res_: *mut gio::GAsyncResult, error: *mut *mut glib::GError);
    pub fn granite_async_image_set_from_icon_name_async(icon_name: *const c_char, icon_size: gtk::GtkIconSize, cancellable: *mut gio::GCancellable, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn granite_async_image_set_from_icon_name_finish(_res_: *mut gio::GAsyncResult, error: *mut *mut glib::GError);
    pub fn granite_async_image_set_from_file_async(file: *mut gio::GFile, width: c_int, height: c_int, preserve_aspect_ratio: gboolean, cancellable: *mut gio::GCancellable, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn granite_async_image_set_from_file_finish(_res_: *mut gio::GAsyncResult, error: *mut *mut glib::GError);

    //=========================================================================
    // GraniteDrawingBufferSurface
    //=========================================================================
    pub fn granite_drawing_buffer_surface_get_type() -> GType;
    pub fn granite_drawing_buffer_surface_get_surface() -> *mut cairo::cairo_surface_t;
    pub fn granite_drawing_buffer_surface_get_width() -> c_int;
    pub fn granite_drawing_buffer_surface_get_height() -> c_int;
    pub fn granite_drawing_buffer_surface_get_context() -> *mut cairo::cairo_t;
    pub fn granite_drawing_buffer_surface_new(width: c_int, height: c_int) -> *mut GraniteDrawingBufferSurface;
    pub fn granite_drawing_buffer_surface_new_with_surface(width: c_int, height: c_int, model: *mut cairo::cairo_surface_t) -> *mut GraniteDrawingBufferSurface;
    pub fn granite_drawing_buffer_surface_new_with_buffer_surface(width: c_int, height: c_int, model: *mut GraniteDrawingBufferSurface) -> *mut GraniteDrawingBufferSurface;
    pub fn granite_drawing_buffer_surface_clear();
    pub fn granite_drawing_buffer_surface_load_to_pixbuf() -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn granite_drawing_buffer_surface_average_color() -> *mut GraniteDrawingColor;
    pub fn granite_drawing_buffer_surface_fast_blur(radius: c_int, process_count: c_int);
    pub fn granite_drawing_buffer_surface_exponential_blur(radius: c_int);
    pub fn granite_drawing_buffer_surface_gaussian_blur(radius: c_int);

    //=========================================================================
    // GraniteDrawingColor
    //=========================================================================
    pub fn granite_drawing_color_get_type() -> GType;
    pub fn granite_drawing_color_alpha_from_int(color: c_int) -> u8;
    pub fn granite_drawing_color_red_from_int(color: c_int) -> u8;
    pub fn granite_drawing_color_green_from_int(color: c_int) -> u8;
    pub fn granite_drawing_color_blue_from_int(color: c_int) -> u8;
    pub fn granite_drawing_color_new(R: c_double, G: c_double, B: c_double, A: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_new_from_gdk(color: gdk::GdkColor) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_new_from_rgba(color: gdk::GdkRGBA) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_new_from_string(color: *const c_char) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_new_from_int(color: c_int) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_set_hue(hue: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_set_sat(sat: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_set_val(val: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_set_alpha(alpha: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_get_hue() -> c_double;
    pub fn granite_drawing_color_get_sat() -> c_double;
    pub fn granite_drawing_color_get_val() -> c_double;
    pub fn granite_drawing_color_add_hue(val: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_set_min_sat(sat: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_set_min_value(val: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_set_max_sat(sat: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_set_max_val(val: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_multiply_sat(amount: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_brighten_val(amount: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_darken_val(amount: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_darken_by_sat(amount: c_double) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_color_to_string() -> *mut c_char;
    pub fn granite_drawing_color_to_int() -> c_int;

    //=========================================================================
    // GraniteDrawingUtilities
    //=========================================================================
    pub fn granite_drawing_utilities_get_type() -> GType;
    pub fn granite_drawing_utilities_cairo_rounded_rectangle(cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double, radius: c_double);
    pub fn granite_drawing_utilities_average_color(source: *mut gdk_pixbuf::GdkPixbuf) -> *mut GraniteDrawingColor;
    pub fn granite_drawing_utilities_new() -> *mut GraniteDrawingUtilities;

    //=========================================================================
    // GraniteGtkPatchAboutDialog
    //=========================================================================
    pub fn granite_gtk_patch_about_dialog_get_type() -> GType;
    pub fn granite_gtk_patch_about_dialog_get_artists(result_length1: *mut c_int) -> *mut *mut c_char;
    pub fn granite_gtk_patch_about_dialog_set_artists(value: *mut *mut c_char, value_length1: c_int);
    pub fn granite_gtk_patch_about_dialog_get_authors(result_length1: *mut c_int) -> *mut *mut c_char;
    pub fn granite_gtk_patch_about_dialog_set_authors(value: *mut *mut c_char, value_length1: c_int);
    pub fn granite_gtk_patch_about_dialog_get_comments() -> *const c_char;
    pub fn granite_gtk_patch_about_dialog_set_comments(value: *const c_char);
    pub fn granite_gtk_patch_about_dialog_get_copyright() -> *const c_char;
    pub fn granite_gtk_patch_about_dialog_set_copyright(value: *const c_char);
    pub fn granite_gtk_patch_about_dialog_get_documenters(result_length1: *mut c_int) -> *mut *mut c_char;
    pub fn granite_gtk_patch_about_dialog_set_documenters(value: *mut *mut c_char, value_length1: c_int);
    pub fn granite_gtk_patch_about_dialog_get_license() -> *const c_char;
    pub fn granite_gtk_patch_about_dialog_set_license(value: *const c_char);
    pub fn granite_gtk_patch_about_dialog_get_license_type() -> gtk::GtkLicense;
    pub fn granite_gtk_patch_about_dialog_set_license_type(value: gtk::GtkLicense);
    pub fn granite_gtk_patch_about_dialog_get_logo() -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn granite_gtk_patch_about_dialog_set_logo(value: *mut gdk_pixbuf::GdkPixbuf);
    pub fn granite_gtk_patch_about_dialog_get_logo_icon_name() -> *const c_char;
    pub fn granite_gtk_patch_about_dialog_set_logo_icon_name(value: *const c_char);
    pub fn granite_gtk_patch_about_dialog_get_program_name() -> *const c_char;
    pub fn granite_gtk_patch_about_dialog_set_program_name(value: *const c_char);
    pub fn granite_gtk_patch_about_dialog_get_translator_credits() -> *const c_char;
    pub fn granite_gtk_patch_about_dialog_set_translator_credits(value: *const c_char);
    pub fn granite_gtk_patch_about_dialog_get_version() -> *const c_char;
    pub fn granite_gtk_patch_about_dialog_set_version(value: *const c_char);
    pub fn granite_gtk_patch_about_dialog_get_website() -> *const c_char;
    pub fn granite_gtk_patch_about_dialog_set_website(value: *const c_char);
    pub fn granite_gtk_patch_about_dialog_get_website_label() -> *const c_char;
    pub fn granite_gtk_patch_about_dialog_set_website_label(value: *const c_char);
    pub fn granite_gtk_patch_about_dialog_new() -> *mut GraniteGtkPatchAboutDialog;

    //=========================================================================
    // GraniteHeaderLabel
    //=========================================================================
    pub fn granite_header_label_get_type() -> GType;
    pub fn granite_header_label_new(label: *const c_char) -> *mut GraniteHeaderLabel;

    //=========================================================================
    // GraniteMessageDialog
    //=========================================================================
    pub fn granite_message_dialog_get_type() -> GType;
    pub fn granite_message_dialog_get_primary_text() -> *const c_char;
    pub fn granite_message_dialog_set_primary_text(value: *const c_char);
    pub fn granite_message_dialog_get_secondary_text() -> *const c_char;
    pub fn granite_message_dialog_set_secondary_text(value: *const c_char);
    pub fn granite_message_dialog_get_image_icon() -> *mut gio::GIcon;
    pub fn granite_message_dialog_set_image_icon(value: *mut gio::GIcon);
    pub fn granite_message_dialog_get_badge_icon() -> *mut gio::GIcon;
    pub fn granite_message_dialog_set_badge_icon(value: *mut gio::GIcon);
    pub fn granite_message_dialog_get_primary_label() -> *mut gtk::GtkLabel;
    pub fn granite_message_dialog_get_secondary_label() -> *mut gtk::GtkLabel;
    pub fn granite_message_dialog_get_custom_bin() -> *mut gtk::GtkBin;
    pub fn granite_message_dialog_new(primary_text: *const c_char, secondary_text: *const c_char, image_icon: *mut gio::GIcon, buttons: gtk::GtkButtonsType) -> *mut GraniteMessageDialog;
    pub fn granite_message_dialog_new_with_image_from_icon_name(primary_text: *const c_char, secondary_text: *const c_char, image_icon_name: *const c_char, buttons: gtk::GtkButtonsType) -> *mut GraniteMessageDialog;
    pub fn granite_message_dialog_show_error_details(error_message: *const c_char);

    //=========================================================================
    // GraniteModeSwitch
    //=========================================================================
    pub fn granite_mode_switch_get_type() -> GType;
    pub fn granite_mode_switch_get_active() -> gboolean;
    pub fn granite_mode_switch_set_active(value: gboolean);
    pub fn granite_mode_switch_get_primary_icon_gicon() -> *mut gio::GIcon;
    pub fn granite_mode_switch_set_primary_icon_gicon(value: *mut gio::GIcon);
    pub fn granite_mode_switch_get_primary_icon_name() -> *const c_char;
    pub fn granite_mode_switch_set_primary_icon_name(value: *const c_char);
    pub fn granite_mode_switch_get_primary_icon_tooltip_text() -> *const c_char;
    pub fn granite_mode_switch_set_primary_icon_tooltip_text(value: *const c_char);
    pub fn granite_mode_switch_get_secondary_icon_gicon() -> *mut gio::GIcon;
    pub fn granite_mode_switch_set_secondary_icon_gicon(value: *mut gio::GIcon);
    pub fn granite_mode_switch_get_secondary_icon_name() -> *const c_char;
    pub fn granite_mode_switch_set_secondary_icon_name(value: *const c_char);
    pub fn granite_mode_switch_get_secondary_icon_tooltip_text() -> *const c_char;
    pub fn granite_mode_switch_set_secondary_icon_tooltip_text(value: *const c_char);
    pub fn granite_mode_switch_new(primary_icon_gicon: *mut gio::GIcon, secondary_icon_gicon: *mut gio::GIcon) -> *mut GraniteModeSwitch;
    pub fn granite_mode_switch_new_from_icon_name(primary_icon_name: *const c_char, secondary_icon_name: *const c_char) -> *mut GraniteModeSwitch;

    //=========================================================================
    // GraniteSeekBar
    //=========================================================================
    pub fn granite_seek_bar_get_type() -> GType;
    pub fn granite_seek_bar_get_playback_duration() -> c_double;
    pub fn granite_seek_bar_set_playback_duration(value: c_double);
    pub fn granite_seek_bar_get_playback_progress() -> c_double;
    pub fn granite_seek_bar_set_playback_progress(value: c_double);
    pub fn granite_seek_bar_get_is_grabbing() -> gboolean;
    pub fn granite_seek_bar_get_is_hovering() -> gboolean;
    pub fn granite_seek_bar_get_progression_label() -> *mut gtk::GtkLabel;
    pub fn granite_seek_bar_set_progression_label(value: *mut gtk::GtkLabel);
    pub fn granite_seek_bar_get_duration_label() -> *mut gtk::GtkLabel;
    pub fn granite_seek_bar_set_duration_label(value: *mut gtk::GtkLabel);
    pub fn granite_seek_bar_get_scale() -> *mut gtk::GtkScale;
    pub fn granite_seek_bar_set_scale(value: *mut gtk::GtkScale);
    pub fn granite_seek_bar_new(playback_duration: c_double) -> *mut GraniteSeekBar;

    //=========================================================================
    // GraniteServicesContractorProxy
    //=========================================================================
    pub fn granite_services_contractor_proxy_get_type() -> GType;
    pub fn granite_services_contractor_proxy_get_instance(error: *mut *mut glib::GError) -> *mut GraniteServicesContractorProxy;
    pub fn granite_services_contractor_proxy_get_all_contracts(error: *mut *mut glib::GError) -> *mut gee::GeeList;
    pub fn granite_services_contractor_proxy_get_contracts_by_mime(mime_type: *const c_char, error: *mut *mut glib::GError) -> *mut gee::GeeList;
    pub fn granite_services_contractor_proxy_get_contracts_by_mimelist(mime_types: *mut *mut c_char, mime_types_length1: c_int, error: *mut *mut glib::GError) -> *mut gee::GeeList;
    pub fn granite_services_contractor_proxy_get_contracts_for_file(file: *mut gio::GFile, error: *mut *mut glib::GError) -> *mut gee::GeeList;
    pub fn granite_services_contractor_proxy_get_contracts_for_files(files: *mut *mut gio::GFile, files_length1: c_int, error: *mut *mut glib::GError) -> *mut gee::GeeList;

    //=========================================================================
    // GraniteServicesIconFactory
    //=========================================================================
    pub fn granite_services_icon_factory_get_type() -> GType;
    pub fn granite_services_icon_factory_new() -> *mut GraniteServicesIconFactory;
    pub fn granite_services_icon_factory_get_default() -> *mut GraniteServicesIconFactory;
    pub fn granite_services_icon_factory_load_symbolic_icon_from_gicon(style: *mut gtk::GtkStyleContext, gicon: *mut gio::GIcon, size: c_int) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn granite_services_icon_factory_load_symbolic_icon(style: *mut gtk::GtkStyleContext, iconname: *const c_char, size: c_int) -> *mut gdk_pixbuf::GdkPixbuf;

    //=========================================================================
    // GraniteServicesLogger
    //=========================================================================
    pub fn granite_services_logger_get_type() -> GType;
    pub fn granite_services_logger_get_DisplayLevel() -> GraniteServicesLogLevel;
    pub fn granite_services_logger_set_DisplayLevel(value: GraniteServicesLogLevel);
    pub fn granite_services_logger_initialize(app_name: *const c_char);
    pub fn granite_services_logger_notification(msg: *const c_char);
    pub fn granite_services_logger_new() -> *mut GraniteServicesLogger;

    //=========================================================================
    // GraniteServicesPaths
    //=========================================================================
    pub fn granite_services_paths_get_type() -> GType;
    pub fn granite_services_paths_get_home_folder() -> *mut gio::GFile;
    pub fn granite_services_paths_set_home_folder(value: *mut gio::GFile);
    pub fn granite_services_paths_get_data_folder() -> *mut gio::GFile;
    pub fn granite_services_paths_set_data_folder(value: *mut gio::GFile);
    pub fn granite_services_paths_get_xdg_config_home_folder() -> *mut gio::GFile;
    pub fn granite_services_paths_set_xdg_config_home_folder(value: *mut gio::GFile);
    pub fn granite_services_paths_get_xdg_data_home_folder() -> *mut gio::GFile;
    pub fn granite_services_paths_set_xdg_data_home_folder(value: *mut gio::GFile);
    pub fn granite_services_paths_get_xdg_cache_home_folder() -> *mut gio::GFile;
    pub fn granite_services_paths_set_xdg_cache_home_folder(value: *mut gio::GFile);
    pub fn granite_services_paths_get_xdg_data_dir_folders() -> *mut glib::GList;
    pub fn granite_services_paths_set_xdg_data_dir_folders(value: *mut glib::GList);
    pub fn granite_services_paths_get_user_config_folder() -> *mut gio::GFile;
    pub fn granite_services_paths_set_user_config_folder(value: *mut gio::GFile);
    pub fn granite_services_paths_get_user_data_folder() -> *mut gio::GFile;
    pub fn granite_services_paths_set_user_data_folder(value: *mut gio::GFile);
    pub fn granite_services_paths_get_user_cache_folder() -> *mut gio::GFile;
    pub fn granite_services_paths_set_user_cache_folder(value: *mut gio::GFile);
    pub fn granite_services_paths_initialize(app_name: *const c_char, data_folder_path: *const c_char);
    pub fn granite_services_paths_ensure_directory_exists(dir: *mut gio::GFile) -> gboolean;
    pub fn granite_services_paths_new() -> *mut GraniteServicesPaths;

    //=========================================================================
    // GraniteServicesSettings
    //=========================================================================
    pub fn granite_services_settings_get_type() -> GType;
    pub fn granite_services_settings_get_schema() -> *mut gio::GSettings;
    pub fn granite_services_settings_verify(key: *const c_char);

    //=========================================================================
    // GraniteServicesSimpleCommand
    //=========================================================================
    pub fn granite_services_simple_command_get_type() -> GType;
    pub fn granite_services_simple_command_new(dir: *const c_char, command: *const c_char) -> *mut GraniteServicesSimpleCommand;
    pub fn granite_services_simple_command_run();

    //=========================================================================
    // GraniteServicesSystem
    //=========================================================================
    pub fn granite_services_system_get_type() -> GType;
    pub fn granite_services_system_open_uri(uri: *const c_char);
    pub fn granite_services_system_open(file: *mut gio::GFile);
    pub fn granite_services_system_open_files(files: *mut *mut gio::GFile, files_length1: c_int);
    pub fn granite_services_system_launch(app: *mut gio::GFile);
    pub fn granite_services_system_execute_command(command: *const c_char) -> gboolean;
    pub fn granite_services_system_launch_with_files(app: *mut gio::GFile, files: *mut *mut gio::GFile, files_length1: c_int);
    pub fn granite_services_system_history_is_enabled() -> gboolean;
    pub fn granite_services_system_new() -> *mut GraniteServicesSystem;

    //=========================================================================
    // GraniteSettings
    //=========================================================================
    pub fn granite_settings_get_type() -> GType;
    pub fn granite_settings_get_prefers_color_scheme() -> GraniteSettingsColorScheme;
    pub fn granite_settings_get_default() -> *mut GraniteSettings;

    //=========================================================================
    // GraniteSettingsPage
    //=========================================================================
    pub fn granite_settings_page_get_type() -> GType;
    pub fn granite_settings_page_get_status_type() -> GraniteSettingsPageStatusType;
    pub fn granite_settings_page_set_status_type(value: GraniteSettingsPageStatusType);
    pub fn granite_settings_page_get_display_widget() -> *mut gtk::GtkWidget;
    pub fn granite_settings_page_get_header() -> *const c_char;
    pub fn granite_settings_page_get_status() -> *const c_char;
    pub fn granite_settings_page_set_status(value: *const c_char);
    pub fn granite_settings_page_get_icon_name() -> *const c_char;
    pub fn granite_settings_page_set_icon_name(value: *const c_char);
    pub fn granite_settings_page_get_title() -> *const c_char;
    pub fn granite_settings_page_set_title(value: *const c_char);

    //=========================================================================
    // GraniteSettingsSidebar
    //=========================================================================
    pub fn granite_settings_sidebar_get_type() -> GType;
    pub fn granite_settings_sidebar_get_stack() -> *mut gtk::GtkStack;
    pub fn granite_settings_sidebar_get_visible_child_name() -> *const c_char;
    pub fn granite_settings_sidebar_set_visible_child_name(value: *const c_char);
    pub fn granite_settings_sidebar_new(stack: *mut gtk::GtkStack) -> *mut GraniteSettingsSidebar;

    //=========================================================================
    // GraniteSimpleSettingsPage
    //=========================================================================
    pub fn granite_simple_settings_page_get_type() -> GType;
    pub fn granite_simple_settings_page_get_action_area() -> *mut gtk::GtkButtonBox;
    pub fn granite_simple_settings_page_get_content_area() -> *mut gtk::GtkGrid;
    pub fn granite_simple_settings_page_get_status_switch() -> *mut gtk::GtkSwitch;
    pub fn granite_simple_settings_page_get_activatable() -> gboolean;
    pub fn granite_simple_settings_page_get_description() -> *const c_char;
    pub fn granite_simple_settings_page_set_description(value: *const c_char);
    pub fn granite_simple_settings_page_get_icon_name() -> *const c_char;
    pub fn granite_simple_settings_page_set_icon_name(value: *const c_char);
    pub fn granite_simple_settings_page_get_title() -> *const c_char;
    pub fn granite_simple_settings_page_set_title(value: *const c_char);

    //=========================================================================
    // GraniteWidgetsAboutDialog
    //=========================================================================
    pub fn granite_widgets_about_dialog_get_type() -> GType;
    pub fn granite_widgets_about_dialog_get_help() -> *const c_char;
    pub fn granite_widgets_about_dialog_set_help(value: *const c_char);
    pub fn granite_widgets_about_dialog_get_translate() -> *const c_char;
    pub fn granite_widgets_about_dialog_set_translate(value: *const c_char);
    pub fn granite_widgets_about_dialog_get_bug() -> *const c_char;
    pub fn granite_widgets_about_dialog_set_bug(value: *const c_char);
    pub fn granite_widgets_about_dialog_new() -> *mut GraniteWidgetsAboutDialog;

    //=========================================================================
    // GraniteWidgetsAlertView
    //=========================================================================
    pub fn granite_widgets_alert_view_get_type() -> GType;
    pub fn granite_widgets_alert_view_get_title() -> *const c_char;
    pub fn granite_widgets_alert_view_set_title(value: *const c_char);
    pub fn granite_widgets_alert_view_get_description() -> *const c_char;
    pub fn granite_widgets_alert_view_set_description(value: *const c_char);
    pub fn granite_widgets_alert_view_get_icon_name() -> *mut c_char;
    pub fn granite_widgets_alert_view_set_icon_name(value: *const c_char);
    pub fn granite_widgets_alert_view_new(title: *const c_char, description: *const c_char, icon_name: *const c_char) -> *mut GraniteWidgetsAlertView;
    pub fn granite_widgets_alert_view_show_action(label: *const c_char);
    pub fn granite_widgets_alert_view_hide_action();

    //=========================================================================
    // GraniteWidgetsAppMenu
    //=========================================================================
    pub fn granite_widgets_app_menu_get_type() -> GType;
    pub fn granite_widgets_app_menu_new(menu: *mut gtk::GtkMenu) -> *mut GraniteWidgetsAppMenu;
    pub fn granite_widgets_app_menu_new_with_app(application: *mut GraniteApplication, menu: *mut gtk::GtkMenu) -> *mut GraniteWidgetsAppMenu;
    pub fn granite_widgets_app_menu_add_items(menu: *mut gtk::GtkMenu);

    //=========================================================================
    // GraniteWidgetsAvatar
    //=========================================================================
    pub fn granite_widgets_avatar_get_type() -> GType;
    pub fn granite_widgets_avatar_get_pixbuf() -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn granite_widgets_avatar_set_pixbuf(value: *mut gdk_pixbuf::GdkPixbuf);
    pub fn granite_widgets_avatar_new() -> *mut GraniteWidgetsAvatar;
    pub fn granite_widgets_avatar_new_from_pixbuf(pixbuf: *mut gdk_pixbuf::GdkPixbuf) -> *mut GraniteWidgetsAvatar;
    pub fn granite_widgets_avatar_new_from_file(filepath: *const c_char, pixel_size: c_int) -> *mut GraniteWidgetsAvatar;
    pub fn granite_widgets_avatar_new_with_default_icon(pixel_size: c_int) -> *mut GraniteWidgetsAvatar;
    pub fn granite_widgets_avatar_show_default(pixel_size: c_int);

    //=========================================================================
    // GraniteWidgetsCellRendererBadge
    //=========================================================================
    pub fn granite_widgets_cell_renderer_badge_get_type() -> GType;
    pub fn granite_widgets_cell_renderer_badge_get_text() -> *const c_char;
    pub fn granite_widgets_cell_renderer_badge_set_text(value: *const c_char);
    pub fn granite_widgets_cell_renderer_badge_new() -> *mut GraniteWidgetsCellRendererBadge;

    //=========================================================================
    // GraniteWidgetsCellRendererExpander
    //=========================================================================
    pub fn granite_widgets_cell_renderer_expander_get_type() -> GType;
    pub fn granite_widgets_cell_renderer_expander_get_is_category_expander() -> gboolean;
    pub fn granite_widgets_cell_renderer_expander_set_is_category_expander(value: gboolean);
    pub fn granite_widgets_cell_renderer_expander_new() -> *mut GraniteWidgetsCellRendererExpander;
    pub fn granite_widgets_cell_renderer_expander_get_arrow_size(widget: *mut gtk::GtkWidget) -> c_int;

    //=========================================================================
    // GraniteWidgetsCollapsiblePaned
    //=========================================================================
    pub fn granite_widgets_collapsible_paned_get_type() -> GType;
    pub fn granite_widgets_collapsible_paned_get_collapse_mode() -> GraniteCollapseMode;
    pub fn granite_widgets_collapsible_paned_set_collapse_mode(value: GraniteCollapseMode);
    pub fn granite_widgets_collapsible_paned_new(orientation: gtk::GtkOrientation) -> *mut GraniteWidgetsCollapsiblePaned;

    //=========================================================================
    // GraniteWidgetsCompositedWindow
    //=========================================================================
    pub fn granite_widgets_composited_window_get_type() -> GType;
    pub fn granite_widgets_composited_window_new() -> *mut GraniteWidgetsCompositedWindow;

    //=========================================================================
    // GraniteWidgetsDatePicker
    //=========================================================================
    pub fn granite_widgets_date_picker_get_type() -> GType;
    pub fn granite_widgets_date_picker_get_format() -> *const c_char;
    pub fn granite_widgets_date_picker_get_date() -> *mut glib::GDateTime;
    pub fn granite_widgets_date_picker_set_date(value: *mut glib::GDateTime);
    pub fn granite_widgets_date_picker_new_with_format(format: *const c_char) -> *mut GraniteWidgetsDatePicker;
    pub fn granite_widgets_date_picker_position_dropdown(rect: *mut gdk::GdkRectangle);
    pub fn granite_widgets_date_picker_new() -> *mut GraniteWidgetsDatePicker;

    //=========================================================================
    // GraniteWidgetsDynamicNotebook
    //=========================================================================
    pub fn granite_widgets_dynamic_notebook_get_type() -> GType;
    pub fn granite_widgets_dynamic_notebook_get_n_tabs() -> c_int;
    pub fn granite_widgets_dynamic_notebook_get_show_tabs() -> gboolean;
    pub fn granite_widgets_dynamic_notebook_set_show_tabs(value: gboolean);
    pub fn granite_widgets_dynamic_notebook_get_show_icons() -> gboolean;
    pub fn granite_widgets_dynamic_notebook_set_show_icons(value: gboolean);
    pub fn granite_widgets_dynamic_notebook_get_tabs_closable() -> gboolean;
    pub fn granite_widgets_dynamic_notebook_set_tabs_closable(value: gboolean);
    pub fn granite_widgets_dynamic_notebook_get_allow_drag() -> gboolean;
    pub fn granite_widgets_dynamic_notebook_set_allow_drag(value: gboolean);
    pub fn granite_widgets_dynamic_notebook_get_allow_new_window() -> gboolean;
    pub fn granite_widgets_dynamic_notebook_set_allow_new_window(value: gboolean);
    pub fn granite_widgets_dynamic_notebook_get_allow_duplication() -> gboolean;
    pub fn granite_widgets_dynamic_notebook_set_allow_duplication(value: gboolean);
    pub fn granite_widgets_dynamic_notebook_get_allow_restoring() -> gboolean;
    pub fn granite_widgets_dynamic_notebook_set_allow_restoring(value: gboolean);
    pub fn granite_widgets_dynamic_notebook_get_max_restorable_tabs() -> c_int;
    pub fn granite_widgets_dynamic_notebook_set_max_restorable_tabs(value: c_int);
    pub fn granite_widgets_dynamic_notebook_get_add_button_visible() -> gboolean;
    pub fn granite_widgets_dynamic_notebook_set_add_button_visible(value: gboolean);
    pub fn granite_widgets_dynamic_notebook_get_allow_pinning() -> gboolean;
    pub fn granite_widgets_dynamic_notebook_set_allow_pinning(value: gboolean);
    pub fn granite_widgets_dynamic_notebook_get_force_left() -> gboolean;
    pub fn granite_widgets_dynamic_notebook_set_force_left(value: gboolean);
    pub fn granite_widgets_dynamic_notebook_get_add_button_tooltip() -> *const c_char;
    pub fn granite_widgets_dynamic_notebook_set_add_button_tooltip(value: *const c_char);
    pub fn granite_widgets_dynamic_notebook_get_current() -> *mut GraniteWidgetsTab;
    pub fn granite_widgets_dynamic_notebook_set_current(value: *mut GraniteWidgetsTab);
    pub fn granite_widgets_dynamic_notebook_get_tabs() -> *mut glib::GList;
    pub fn granite_widgets_dynamic_notebook_get_group_name() -> *const c_char;
    pub fn granite_widgets_dynamic_notebook_set_group_name(value: *const c_char);
    pub fn granite_widgets_dynamic_notebook_get_tab_bar_behavior() -> GraniteWidgetsDynamicNotebookTabBarBehavior;
    pub fn granite_widgets_dynamic_notebook_set_tab_bar_behavior(value: GraniteWidgetsDynamicNotebookTabBarBehavior);
    pub fn granite_widgets_dynamic_notebook_get_menu() -> *mut gtk::GtkMenu;
    pub fn granite_widgets_dynamic_notebook_new() -> *mut GraniteWidgetsDynamicNotebook;
    pub fn granite_widgets_dynamic_notebook_remove_tab(tab: *mut GraniteWidgetsTab);
    pub fn granite_widgets_dynamic_notebook_next_page();
    pub fn granite_widgets_dynamic_notebook_previous_page();
    pub fn granite_widgets_dynamic_notebook_get_children() -> *mut glib::GList;
    pub fn granite_widgets_dynamic_notebook_get_tab_position(tab: *mut GraniteWidgetsTab) -> c_int;
    pub fn granite_widgets_dynamic_notebook_set_tab_position(tab: *mut GraniteWidgetsTab, position: c_int);
    pub fn granite_widgets_dynamic_notebook_get_tab_by_index(index: c_int) -> *mut GraniteWidgetsTab;
    pub fn granite_widgets_dynamic_notebook_get_tab_by_widget(widget: *mut gtk::GtkWidget) -> *mut GraniteWidgetsTab;
    pub fn granite_widgets_dynamic_notebook_get_nth_page(index: c_int) -> *mut gtk::GtkWidget;
    pub fn granite_widgets_dynamic_notebook_insert_tab(tab: *mut GraniteWidgetsTab, index: c_int) -> c_uint;

    //=========================================================================
    // GraniteWidgetsModeButton
    //=========================================================================
    pub fn granite_widgets_mode_button_get_type() -> GType;
    pub fn granite_widgets_mode_button_get_selected() -> c_int;
    pub fn granite_widgets_mode_button_set_selected(value: c_int);
    pub fn granite_widgets_mode_button_get_n_items() -> c_uint;
    pub fn granite_widgets_mode_button_new() -> *mut GraniteWidgetsModeButton;
    pub fn granite_widgets_mode_button_append_pixbuf(pixbuf: *mut gdk_pixbuf::GdkPixbuf) -> c_int;
    pub fn granite_widgets_mode_button_append_text(text: *const c_char) -> c_int;
    pub fn granite_widgets_mode_button_append_icon(icon_name: *const c_char, size: gtk::GtkIconSize) -> c_int;
    pub fn granite_widgets_mode_button_append(w: *mut gtk::GtkWidget) -> c_int;
    pub fn granite_widgets_mode_button_set_active(new_active_index: c_int);
    pub fn granite_widgets_mode_button_set_item_visible(index: c_int, val: gboolean);
    pub fn granite_widgets_mode_button_remove(index: c_int);
    pub fn granite_widgets_mode_button_clear_children();

    //=========================================================================
    // GraniteWidgetsOverlayBar
    //=========================================================================
    pub fn granite_widgets_overlay_bar_get_type() -> GType;
    pub fn granite_widgets_overlay_bar_get_overlay() -> *mut gtk::GtkOverlay;
    pub fn granite_widgets_overlay_bar_get_status() -> *const c_char;
    pub fn granite_widgets_overlay_bar_set_status(value: *const c_char);
    pub fn granite_widgets_overlay_bar_get_label() -> *const c_char;
    pub fn granite_widgets_overlay_bar_set_label(value: *const c_char);
    pub fn granite_widgets_overlay_bar_get_active() -> gboolean;
    pub fn granite_widgets_overlay_bar_set_active(value: gboolean);
    pub fn granite_widgets_overlay_bar_new(overlay: *mut gtk::GtkOverlay) -> *mut GraniteWidgetsOverlayBar;

    //=========================================================================
    // GraniteWidgetsSourceList
    //=========================================================================
    pub fn granite_widgets_source_list_get_type() -> GType;
    pub fn granite_widgets_source_list_get_root() -> *mut GraniteWidgetsSourceListExpandableItem;
    pub fn granite_widgets_source_list_set_root(value: *mut GraniteWidgetsSourceListExpandableItem);
    pub fn granite_widgets_source_list_get_selected() -> *mut GraniteWidgetsSourceListItem;
    pub fn granite_widgets_source_list_set_selected(value: *mut GraniteWidgetsSourceListItem);
    pub fn granite_widgets_source_list_get_ellipsize_mode() -> pango::PangoEllipsizeMode;
    pub fn granite_widgets_source_list_set_ellipsize_mode(value: pango::PangoEllipsizeMode);
    pub fn granite_widgets_source_list_get_editing() -> gboolean;
    pub fn granite_widgets_source_list_new(root: *mut GraniteWidgetsSourceListExpandableItem) -> *mut GraniteWidgetsSourceList;
    pub fn granite_widgets_source_list_has_item(item: *mut GraniteWidgetsSourceListItem) -> gboolean;
    pub fn granite_widgets_source_list_set_filter_func(visible_func: GraniteWidgetsSourceListVisibleFunc, visible_func_target: *mut c_void, refilter: gboolean);
    pub fn granite_widgets_source_list_refilter();
    pub fn granite_widgets_source_list_is_item_expanded(item: *mut GraniteWidgetsSourceListItem) -> gboolean;
    pub fn granite_widgets_source_list_start_editing_item(item: *mut GraniteWidgetsSourceListItem) -> gboolean;
    pub fn granite_widgets_source_list_stop_editing();
    pub fn granite_widgets_source_list_enable_drag_source(src_entries: *mut gtk::GtkTargetEntry, src_entries_length1: c_int);
    pub fn granite_widgets_source_list_disable_drag_source();
    pub fn granite_widgets_source_list_enable_drag_dest(dest_entries: *mut gtk::GtkTargetEntry, dest_entries_length1: c_int, actions: gdk::GdkDragAction);
    pub fn granite_widgets_source_list_disable_drag_dest();
    pub fn granite_widgets_source_list_scroll_to_item(item: *mut GraniteWidgetsSourceListItem, expand_parents: gboolean, use_align: gboolean, row_align: c_float) -> gboolean;
    pub fn granite_widgets_source_list_get_previous_item(reference: *mut GraniteWidgetsSourceListItem) -> *mut GraniteWidgetsSourceListItem;
    pub fn granite_widgets_source_list_get_next_item(reference: *mut GraniteWidgetsSourceListItem) -> *mut GraniteWidgetsSourceListItem;
    pub fn granite_widgets_source_list_get_first_child(parent: *mut GraniteWidgetsSourceListExpandableItem) -> *mut GraniteWidgetsSourceListItem;
    pub fn granite_widgets_source_list_get_last_child(parent: *mut GraniteWidgetsSourceListExpandableItem) -> *mut GraniteWidgetsSourceListItem;
    pub fn granite_widgets_source_list_get_n_visible_children(parent: *mut GraniteWidgetsSourceListExpandableItem) -> c_uint;

    //=========================================================================
    // GraniteWidgetsSourceListExpandableItem
    //=========================================================================
    pub fn granite_widgets_source_list_expandable_item_get_type() -> GType;
    pub fn granite_widgets_source_list_expandable_item_get_collapsible() -> gboolean;
    pub fn granite_widgets_source_list_expandable_item_set_collapsible(value: gboolean);
    pub fn granite_widgets_source_list_expandable_item_get_expanded() -> gboolean;
    pub fn granite_widgets_source_list_expandable_item_set_expanded(value: gboolean);
    pub fn granite_widgets_source_list_expandable_item_get_n_children() -> c_uint;
    pub fn granite_widgets_source_list_expandable_item_get_children() -> *mut gee::GeeCollection;
    pub fn granite_widgets_source_list_expandable_item_new(name: *const c_char) -> *mut GraniteWidgetsSourceListExpandableItem;
    pub fn granite_widgets_source_list_expandable_item_contains(item: *mut GraniteWidgetsSourceListItem) -> gboolean;
    pub fn granite_widgets_source_list_expandable_item_add(item: *mut GraniteWidgetsSourceListItem);
    pub fn granite_widgets_source_list_expandable_item_remove(item: *mut GraniteWidgetsSourceListItem);
    pub fn granite_widgets_source_list_expandable_item_clear();
    pub fn granite_widgets_source_list_expandable_item_expand_all(inclusive: gboolean, recursive: gboolean);
    pub fn granite_widgets_source_list_expandable_item_collapse_all(inclusive: gboolean, recursive: gboolean);
    pub fn granite_widgets_source_list_expandable_item_expand_with_parents();
    pub fn granite_widgets_source_list_expandable_item_collapse_with_parents();

    //=========================================================================
    // GraniteWidgetsSourceListItem
    //=========================================================================
    pub fn granite_widgets_source_list_item_get_type() -> GType;
    pub fn granite_widgets_source_list_item_get_parent() -> *mut GraniteWidgetsSourceListExpandableItem;
    pub fn granite_widgets_source_list_item_get_name() -> *const c_char;
    pub fn granite_widgets_source_list_item_set_name(value: *const c_char);
    pub fn granite_widgets_source_list_item_get_tooltip() -> *const c_char;
    pub fn granite_widgets_source_list_item_set_tooltip(value: *const c_char);
    pub fn granite_widgets_source_list_item_get_markup() -> *const c_char;
    pub fn granite_widgets_source_list_item_set_markup(value: *const c_char);
    pub fn granite_widgets_source_list_item_get_badge() -> *const c_char;
    pub fn granite_widgets_source_list_item_set_badge(value: *const c_char);
    pub fn granite_widgets_source_list_item_get_editable() -> gboolean;
    pub fn granite_widgets_source_list_item_set_editable(value: gboolean);
    pub fn granite_widgets_source_list_item_get_visible() -> gboolean;
    pub fn granite_widgets_source_list_item_set_visible(value: gboolean);
    pub fn granite_widgets_source_list_item_get_selectable() -> gboolean;
    pub fn granite_widgets_source_list_item_set_selectable(value: gboolean);
    pub fn granite_widgets_source_list_item_get_icon() -> *mut gio::GIcon;
    pub fn granite_widgets_source_list_item_set_icon(value: *mut gio::GIcon);
    pub fn granite_widgets_source_list_item_get_activatable() -> *mut gio::GIcon;
    pub fn granite_widgets_source_list_item_set_activatable(value: *mut gio::GIcon);
    pub fn granite_widgets_source_list_item_get_activatable_tooltip() -> *const c_char;
    pub fn granite_widgets_source_list_item_set_activatable_tooltip(value: *const c_char);
    pub fn granite_widgets_source_list_item_new(name: *const c_char) -> *mut GraniteWidgetsSourceListItem;
    pub fn granite_widgets_source_list_item_get_context_menu() -> *mut gtk::GtkMenu;

    //=========================================================================
    // GraniteWidgetsStorageBar
    //=========================================================================
    pub fn granite_widgets_storage_bar_get_type() -> GType;
    pub fn granite_widgets_storage_bar_get_storage() -> u64;
    pub fn granite_widgets_storage_bar_set_storage(value: u64);
    pub fn granite_widgets_storage_bar_get_total_usage() -> u64;
    pub fn granite_widgets_storage_bar_set_total_usage(value: u64);
    pub fn granite_widgets_storage_bar_get_inner_margin_sides() -> c_int;
    pub fn granite_widgets_storage_bar_set_inner_margin_sides(value: c_int);
    pub fn granite_widgets_storage_bar_new(storage: u64) -> *mut GraniteWidgetsStorageBar;
    pub fn granite_widgets_storage_bar_new_with_total_usage(storage: u64, total_usage: u64) -> *mut GraniteWidgetsStorageBar;
    pub fn granite_widgets_storage_bar_update_block_size(description: GraniteWidgetsStorageBarItemDescription, size: u64);

    //=========================================================================
    // GraniteWidgetsTab
    //=========================================================================
    pub fn granite_widgets_tab_get_type() -> GType;
    pub fn granite_widgets_tab_get_label() -> *const c_char;
    pub fn granite_widgets_tab_set_label(value: *const c_char);
    pub fn granite_widgets_tab_get_pinned() -> gboolean;
    pub fn granite_widgets_tab_set_pinned(value: gboolean);
    pub fn granite_widgets_tab_get_pinnable() -> gboolean;
    pub fn granite_widgets_tab_set_pinnable(value: gboolean);
    pub fn granite_widgets_tab_get_restore_data() -> *const c_char;
    pub fn granite_widgets_tab_set_restore_data(value: *const c_char);
    pub fn granite_widgets_tab_get_page() -> *mut gtk::GtkWidget;
    pub fn granite_widgets_tab_set_page(value: *mut gtk::GtkWidget);
    pub fn granite_widgets_tab_get_icon() -> *mut gio::GIcon;
    pub fn granite_widgets_tab_set_icon(value: *mut gio::GIcon);
    pub fn granite_widgets_tab_get_working() -> gboolean;
    pub fn granite_widgets_tab_set_working(value: gboolean);
    pub fn granite_widgets_tab_get_ellipsize_mode() -> pango::PangoEllipsizeMode;
    pub fn granite_widgets_tab_set_ellipsize_mode(value: pango::PangoEllipsizeMode);
    pub fn granite_widgets_tab_get_fixed() -> gboolean;
    pub fn granite_widgets_tab_set_fixed(value: gboolean);
    pub fn granite_widgets_tab_get_menu() -> *mut gtk::GtkMenu;
    pub fn granite_widgets_tab_set_menu(value: *mut gtk::GtkMenu);
    pub fn granite_widgets_tab_new(label: *const c_char, icon: *mut gio::GIcon, page: *mut gtk::GtkWidget) -> *mut GraniteWidgetsTab;
    pub fn granite_widgets_tab_close();

    //=========================================================================
    // GraniteWidgetsTimePicker
    //=========================================================================
    pub fn granite_widgets_time_picker_get_type() -> GType;
    pub fn granite_widgets_time_picker_get_format_12() -> *const c_char;
    pub fn granite_widgets_time_picker_get_format_24() -> *const c_char;
    pub fn granite_widgets_time_picker_get_time() -> *mut glib::GDateTime;
    pub fn granite_widgets_time_picker_set_time(value: *mut glib::GDateTime);
    pub fn granite_widgets_time_picker_new_with_format(format_12: *const c_char, format_24: *const c_char) -> *mut GraniteWidgetsTimePicker;
    pub fn granite_widgets_time_picker_position_dropdown(x: *mut c_int, y: *mut c_int);
    pub fn granite_widgets_time_picker_new() -> *mut GraniteWidgetsTimePicker;

    //=========================================================================
    // GraniteWidgetsToast
    //=========================================================================
    pub fn granite_widgets_toast_get_type() -> GType;
    pub fn granite_widgets_toast_get_title() -> *const c_char;
    pub fn granite_widgets_toast_set_title(value: *const c_char);
    pub fn granite_widgets_toast_new(title: *const c_char) -> *mut GraniteWidgetsToast;
    pub fn granite_widgets_toast_set_default_action(label: *const c_char);
    pub fn granite_widgets_toast_send_notification();

    //=========================================================================
    // GraniteWidgetsWelcome
    //=========================================================================
    pub fn granite_widgets_welcome_get_type() -> GType;
    pub fn granite_widgets_welcome_get_title() -> *const c_char;
    pub fn granite_widgets_welcome_set_title(value: *const c_char);
    pub fn granite_widgets_welcome_get_subtitle() -> *const c_char;
    pub fn granite_widgets_welcome_set_subtitle(value: *const c_char);
    pub fn granite_widgets_welcome_new(title_text: *const c_char, subtitle_text: *const c_char) -> *mut GraniteWidgetsWelcome;
    pub fn granite_widgets_welcome_set_item_visible(index: c_uint, val: gboolean);
    pub fn granite_widgets_welcome_remove_item(index: c_uint);
    pub fn granite_widgets_welcome_set_item_sensitivity(index: c_uint, val: gboolean);
    pub fn granite_widgets_welcome_append(icon_name: *const c_char, option_text: *const c_char, description_text: *const c_char) -> c_int;
    pub fn granite_widgets_welcome_append_with_pixbuf(pixbuf: *mut gdk_pixbuf::GdkPixbuf, option_text: *const c_char, description_text: *const c_char) -> c_int;
    pub fn granite_widgets_welcome_append_with_image(image: *mut gtk::GtkImage, option_text: *const c_char, description_text: *const c_char) -> c_int;
    pub fn granite_widgets_welcome_get_button_from_index(index: c_int) -> *mut GraniteWidgetsWelcomeButton;

    //=========================================================================
    // GraniteWidgetsWelcomeButton
    //=========================================================================
    pub fn granite_widgets_welcome_button_get_type() -> GType;
    pub fn granite_widgets_welcome_button_get_title() -> *const c_char;
    pub fn granite_widgets_welcome_button_set_title(value: *const c_char);
    pub fn granite_widgets_welcome_button_get_description() -> *const c_char;
    pub fn granite_widgets_welcome_button_set_description(value: *const c_char);
    pub fn granite_widgets_welcome_button_get_icon() -> *mut gtk::GtkImage;
    pub fn granite_widgets_welcome_button_set_icon(value: *mut gtk::GtkImage);
    pub fn granite_widgets_welcome_button_new(image: *mut gtk::GtkImage, option_text: *const c_char, description_text: *const c_char) -> *mut GraniteWidgetsWelcomeButton;

    //=========================================================================
    // GraniteServicesContract
    //=========================================================================
    pub fn granite_services_contract_get_type() -> GType;
    pub fn granite_services_contract_get_display_name() -> *mut c_char;
    pub fn granite_services_contract_get_description() -> *mut c_char;
    pub fn granite_services_contract_get_icon() -> *mut gio::GIcon;
    pub fn granite_services_contract_execute_with_file(file: *mut gio::GFile, error: *mut *mut glib::GError);
    pub fn granite_services_contract_execute_with_files(files: *mut *mut gio::GFile, files_length1: c_int, error: *mut *mut glib::GError);

    //=========================================================================
    // GraniteServicesSettingsSerializable
    //=========================================================================
    pub fn granite_services_settings_serializable_get_type() -> GType;
    pub fn granite_services_settings_serializable_settings_serialize() -> *mut c_char;
    pub fn granite_services_settings_serializable_settings_deserialize(s: *const c_char);

    //=========================================================================
    // GraniteWidgetsSourceListDragDest
    //=========================================================================
    pub fn granite_widgets_source_list_drag_dest_get_type() -> GType;
    pub fn granite_widgets_source_list_drag_dest_data_drop_possible(context: *mut gdk::GdkDragContext, data: *mut gtk::GtkSelectionData) -> gboolean;
    pub fn granite_widgets_source_list_drag_dest_data_received(context: *mut gdk::GdkDragContext, data: *mut gtk::GtkSelectionData) -> gdk::GdkDragAction;

    //=========================================================================
    // GraniteWidgetsSourceListDragSource
    //=========================================================================
    pub fn granite_widgets_source_list_drag_source_get_type() -> GType;
    pub fn granite_widgets_source_list_drag_source_draggable() -> gboolean;
    pub fn granite_widgets_source_list_drag_source_prepare_selection_data(selection_data: *mut gtk::GtkSelectionData);

    //=========================================================================
    // GraniteWidgetsSourceListSortable
    //=========================================================================
    pub fn granite_widgets_source_list_sortable_get_type() -> GType;
    pub fn granite_widgets_source_list_sortable_allow_dnd_sorting() -> gboolean;
    pub fn granite_widgets_source_list_sortable_compare(a: *mut GraniteWidgetsSourceListItem, b: *mut GraniteWidgetsSourceListItem) -> c_int;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn granite_date_time_get_default_time_format(is_12h: gboolean, with_second: gboolean) -> *mut c_char;
    pub fn granite_date_time_get_relative_datetime(date_time: *mut glib::GDateTime) -> *mut c_char;
    pub fn granite_date_time_is_same_day(day1: *mut glib::GDateTime, day2: *mut glib::GDateTime) -> gboolean;
    pub fn granite_date_time_get_default_date_format(with_weekday: gboolean, with_day: gboolean, with_year: gboolean) -> *mut c_char;
    pub fn granite_date_time_seconds_to_time(seconds: c_int) -> *mut c_char;
    pub fn granite_services_application_set_badge(count: i64, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn granite_services_application_set_badge_finish(_res_: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn granite_services_application_set_badge_visible(visible: gboolean, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn granite_services_application_set_badge_visible_finish(_res_: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn granite_services_application_set_progress(progress: c_double, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn granite_services_application_set_progress_finish(_res_: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn granite_services_application_set_progress_visible(visible: gboolean, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn granite_services_application_set_progress_visible_finish(_res_: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn granite_widgets_utils_set_color_primary(window: *mut gtk::GtkWidget, color: gdk::GdkRGBA, priority: c_int) -> *mut gtk::GtkCssProvider;
    pub fn granite_widgets_utils_set_theming(widget: *mut gtk::GtkWidget, stylesheet: *const c_char, class_name: *const c_char, priority: c_int) -> *mut gtk::GtkCssProvider;
    pub fn granite_widgets_utils_set_theming_for_screen(screen: *mut gdk::GdkScreen, stylesheet: *const c_char, priority: c_int) -> *mut gtk::GtkCssProvider;
    pub fn granite_widgets_utils_get_css_provider(stylesheet: *const c_char) -> *mut gtk::GtkCssProvider;
    pub fn granite_widgets_utils_apply_text_style_to_label(text_style: GraniteTextStyle, label: *mut gtk::GtkLabel);
    pub fn granite_widgets_utils_get_default_close_button_position(position: *mut GraniteCloseButtonPosition) -> gboolean;
    pub fn granite_widgets_utils_get_button_layout_schema() -> *mut c_char;
    pub fn granite_widgets_storage_bar_item_description_get_class(description: GraniteWidgetsStorageBarItemDescription) -> *mut c_char;
    pub fn granite_widgets_storage_bar_item_description_get_name(description: GraniteWidgetsStorageBarItemDescription) -> *mut c_char;
    pub fn granite_widgets_show_about_dialog(parent: *mut gtk::GtkWindow, first: *const c_char, ...);
    pub fn granite_text_style_get_stylesheet(style_class: *mut *mut c_char) -> *mut c_char;
    pub fn granite_accel_to_string(accel: *const c_char) -> *mut c_char;
    pub fn granite_markup_accel_tooltip(accels: *mut *mut c_char, accels_length1: c_int, description: *const c_char) -> *mut c_char;
    pub fn granite_contrasting_foreground_color(bg_color: gdk::GdkRGBA, result: *mut gdk::GdkRGBA);

}
